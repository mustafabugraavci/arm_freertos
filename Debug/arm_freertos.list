
arm_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d30  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005f10  08005f10  00015f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff8  08005ff8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005ff8  08005ff8  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006000  08006000  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b18  20000074  0800607c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b8c  0800607c  00021b8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e190  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b5b  00000000  00000000  0003e234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  00041d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001680  00000000  00000000  00043578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002052a  00000000  00000000  00044bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1d1  00000000  00000000  00065122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfb00  00000000  00000000  000802f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014fdf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067ac  00000000  00000000  0014fe44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005ef8 	.word	0x08005ef8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08005ef8 	.word	0x08005ef8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <MX_FREERTOS_Init+0x18>)
 800052a:	2100      	movs	r1, #0
 800052c:	4804      	ldr	r0, [pc, #16]	; (8000540 <MX_FREERTOS_Init+0x1c>)
 800052e:	f002 feb5 	bl	800329c <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a03      	ldr	r2, [pc, #12]	; (8000544 <MX_FREERTOS_Init+0x20>)
 8000536:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	08005f34 	.word	0x08005f34
 8000540:	08000549 	.word	0x08000549
 8000544:	20000090 	.word	0x20000090

08000548 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000550:	2001      	movs	r0, #1
 8000552:	f002 ff35 	bl	80033c0 <osDelay>
 8000556:	e7fb      	b.n	8000550 <StartDefaultTask+0x8>

08000558 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <MX_GPIO_Init+0x78>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	4a17      	ldr	r2, [pc, #92]	; (80005d0 <MX_GPIO_Init+0x78>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057a:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <MX_GPIO_Init+0x78>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <MX_GPIO_Init+0x78>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	4a11      	ldr	r2, [pc, #68]	; (80005d0 <MX_GPIO_Init+0x78>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MX_GPIO_Init+0x78>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a4:	480b      	ldr	r0, [pc, #44]	; (80005d4 <MX_GPIO_Init+0x7c>)
 80005a6:	f000 fcbb 	bl	8000f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	4619      	mov	r1, r3
 80005c2:	4804      	ldr	r0, [pc, #16]	; (80005d4 <MX_GPIO_Init+0x7c>)
 80005c4:	f000 fb2a 	bl	8000c1c <HAL_GPIO_Init>

}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40021000 	.word	0x40021000
 80005d4:	48000400 	.word	0x48000400

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fa07 	bl	80009ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f80b 	bl	80005fa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f7ff ffb8 	bl	8000558 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 f934 	bl	8000854 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80005ec:	f002 fe0c 	bl	8003208 <osKernelInitialize>
  MX_FREERTOS_Init();
 80005f0:	f7ff ff98 	bl	8000524 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80005f4:	f002 fe2c 	bl	8003250 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <main+0x20>

080005fa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b094      	sub	sp, #80	; 0x50
 80005fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000600:	f107 0318 	add.w	r3, r7, #24
 8000604:	2238      	movs	r2, #56	; 0x38
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f005 fbab 	bl	8005d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800061c:	2000      	movs	r0, #0
 800061e:	f000 fc97 	bl	8000f50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000622:	2302      	movs	r3, #2
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2340      	movs	r3, #64	; 0x40
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000638:	2304      	movs	r3, #4
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800063c:	2355      	movs	r3, #85	; 0x55
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0318 	add.w	r3, r7, #24
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fd21 	bl	8001098 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800065c:	f000 f82a 	bl	80006b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2303      	movs	r3, #3
 8000666:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2104      	movs	r1, #4
 8000678:	4618      	mov	r0, r3
 800067a:	f001 f825 	bl	80016c8 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000684:	f000 f816 	bl	80006b4 <Error_Handler>
  }
}
 8000688:	bf00      	nop
 800068a:	3750      	adds	r7, #80	; 0x50
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d101      	bne.n	80006a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006a2:	f000 f9bd 	bl	8000a20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40001400 	.word	0x40001400

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	e7fe      	b.n	80006bc <Error_Handler+0x8>
	...

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <HAL_MspInit+0x4c>)
 80006c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ca:	4a10      	ldr	r2, [pc, #64]	; (800070c <HAL_MspInit+0x4c>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6613      	str	r3, [r2, #96]	; 0x60
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <HAL_MspInit+0x4c>)
 80006d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <HAL_MspInit+0x4c>)
 80006e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <HAL_MspInit+0x4c>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e8:	6593      	str	r3, [r2, #88]	; 0x58
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <HAL_MspInit+0x4c>)
 80006ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	210f      	movs	r1, #15
 80006fa:	f06f 0001 	mvn.w	r0, #1
 80006fe:	f000 fa65 	bl	8000bcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40021000 	.word	0x40021000

08000710 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08c      	sub	sp, #48	; 0x30
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000720:	2300      	movs	r3, #0
 8000722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000726:	4b2d      	ldr	r3, [pc, #180]	; (80007dc <HAL_InitTick+0xcc>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072a:	4a2c      	ldr	r2, [pc, #176]	; (80007dc <HAL_InitTick+0xcc>)
 800072c:	f043 0320 	orr.w	r3, r3, #32
 8000730:	6593      	str	r3, [r2, #88]	; 0x58
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <HAL_InitTick+0xcc>)
 8000734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000736:	f003 0320 	and.w	r3, r3, #32
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800073e:	f107 020c 	add.w	r2, r7, #12
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	4611      	mov	r1, r2
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f993 	bl	8001a74 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800074e:	f001 f965 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 8000752:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000756:	4a22      	ldr	r2, [pc, #136]	; (80007e0 <HAL_InitTick+0xd0>)
 8000758:	fba2 2303 	umull	r2, r3, r2, r3
 800075c:	0c9b      	lsrs	r3, r3, #18
 800075e:	3b01      	subs	r3, #1
 8000760:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <HAL_InitTick+0xd4>)
 8000764:	4a20      	ldr	r2, [pc, #128]	; (80007e8 <HAL_InitTick+0xd8>)
 8000766:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <HAL_InitTick+0xd4>)
 800076a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800076e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000770:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <HAL_InitTick+0xd4>)
 8000772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000774:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <HAL_InitTick+0xd4>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <HAL_InitTick+0xd4>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8000782:	4818      	ldr	r0, [pc, #96]	; (80007e4 <HAL_InitTick+0xd4>)
 8000784:	f001 fbde 	bl	8001f44 <HAL_TIM_Base_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800078e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000792:	2b00      	cmp	r3, #0
 8000794:	d11b      	bne.n	80007ce <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000796:	4813      	ldr	r0, [pc, #76]	; (80007e4 <HAL_InitTick+0xd4>)
 8000798:	f001 fc36 	bl	8002008 <HAL_TIM_Base_Start_IT>
 800079c:	4603      	mov	r3, r0
 800079e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80007a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d111      	bne.n	80007ce <HAL_InitTick+0xbe>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80007aa:	2037      	movs	r0, #55	; 0x37
 80007ac:	f000 fa28 	bl	8000c00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b0f      	cmp	r3, #15
 80007b4:	d808      	bhi.n	80007c8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80007b6:	2200      	movs	r2, #0
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	2037      	movs	r0, #55	; 0x37
 80007bc:	f000 fa06 	bl	8000bcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007c0:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <HAL_InitTick+0xdc>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6013      	str	r3, [r2, #0]
 80007c6:	e002      	b.n	80007ce <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80007c8:	2301      	movs	r3, #1
 80007ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80007ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3730      	adds	r7, #48	; 0x30
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000
 80007e0:	431bde83 	.word	0x431bde83
 80007e4:	20000094 	.word	0x20000094
 80007e8:	40001400 	.word	0x40001400
 80007ec:	20000004 	.word	0x20000004

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <NMI_Handler+0x4>

080007f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <HardFault_Handler+0x4>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <MemManage_Handler+0x4>

08000802 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <BusFault_Handler+0x4>

08000808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <UsageFault_Handler+0x4>

0800080e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <TIM7_IRQHandler+0x10>)
 8000822:	f001 fc5b 	bl	80020dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000094 	.word	0x20000094

08000830 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <SystemInit+0x20>)
 8000836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083a:	4a05      	ldr	r2, [pc, #20]	; (8000850 <SystemInit+0x20>)
 800083c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000858:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 800085a:	4a23      	ldr	r2, [pc, #140]	; (80008e8 <MX_USART2_UART_Init+0x94>)
 800085c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085e:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089c:	4811      	ldr	r0, [pc, #68]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 800089e:	f001 fe9b 	bl	80025d8 <HAL_UART_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008a8:	f7ff ff04 	bl	80006b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	480d      	ldr	r0, [pc, #52]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 80008b0:	f002 fb9c 	bl	8002fec <HAL_UARTEx_SetTxFifoThreshold>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ba:	f7ff fefb 	bl	80006b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008be:	2100      	movs	r1, #0
 80008c0:	4808      	ldr	r0, [pc, #32]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 80008c2:	f002 fbd1 	bl	8003068 <HAL_UARTEx_SetRxFifoThreshold>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008cc:	f7ff fef2 	bl	80006b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_USART2_UART_Init+0x90>)
 80008d2:	f002 fb52 	bl	8002f7a <HAL_UARTEx_DisableFifoMode>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008dc:	f7ff feea 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200000e0 	.word	0x200000e0
 80008e8:	40004400 	.word	0x40004400

080008ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b09a      	sub	sp, #104	; 0x68
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	2244      	movs	r2, #68	; 0x44
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f005 fa29 	bl	8005d64 <memset>
  if(uartHandle->Instance==USART2)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a1f      	ldr	r2, [pc, #124]	; (8000994 <HAL_UART_MspInit+0xa8>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d136      	bne.n	800098a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800091c:	2302      	movs	r3, #2
 800091e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4618      	mov	r0, r3
 800092a:	f001 f91b 	bl	8001b64 <HAL_RCCEx_PeriphCLKConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000934:	f7ff febe 	bl	80006b4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_UART_MspInit+0xac>)
 800093a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093c:	4a16      	ldr	r2, [pc, #88]	; (8000998 <HAL_UART_MspInit+0xac>)
 800093e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000942:	6593      	str	r3, [r2, #88]	; 0x58
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <HAL_UART_MspInit+0xac>)
 8000946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <HAL_UART_MspInit+0xac>)
 8000952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000954:	4a10      	ldr	r2, [pc, #64]	; (8000998 <HAL_UART_MspInit+0xac>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_UART_MspInit+0xac>)
 800095e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000968:	230c      	movs	r3, #12
 800096a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000978:	2307      	movs	r3, #7
 800097a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000980:	4619      	mov	r1, r3
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f000 f949 	bl	8000c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800098a:	bf00      	nop
 800098c:	3768      	adds	r7, #104	; 0x68
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40004400 	.word	0x40004400
 8000998:	40021000 	.word	0x40021000

0800099c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800099e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	480d      	ldr	r0, [pc, #52]	; (80009d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009a2:	490e      	ldr	r1, [pc, #56]	; (80009dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <LoopForever+0xe>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b8:	4c0b      	ldr	r4, [pc, #44]	; (80009e8 <LoopForever+0x16>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009c6:	f7ff ff33 	bl	8000830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ca:	f005 f997 	bl	8005cfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ce:	f7ff fe03 	bl	80005d8 <main>

080009d2 <LoopForever>:

LoopForever:
    b LoopForever
 80009d2:	e7fe      	b.n	80009d2 <LoopForever>
  ldr   r0, =_estack
 80009d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80009e0:	08006008 	.word	0x08006008
  ldr r2, =_sbss
 80009e4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80009e8:	20001b8c 	.word	0x20001b8c

080009ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC1_2_IRQHandler>

080009ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009f4:	2300      	movs	r3, #0
 80009f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f8dc 	bl	8000bb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009fe:	200f      	movs	r0, #15
 8000a00:	f7ff fe86 	bl	8000710 <HAL_InitTick>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d002      	beq.n	8000a10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	71fb      	strb	r3, [r7, #7]
 8000a0e:	e001      	b.n	8000a14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a10:	f7ff fe56 	bl	80006c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a14:	79fb      	ldrb	r3, [r7, #7]

}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_IncTick+0x1c>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_IncTick+0x20>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a03      	ldr	r2, [pc, #12]	; (8000a3c <HAL_IncTick+0x1c>)
 8000a30:	6013      	str	r3, [r2, #0]
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	20000170 	.word	0x20000170
 8000a40:	20000008 	.word	0x20000008

08000a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <HAL_GetTick+0x14>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000170 	.word	0x20000170

08000a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	60d3      	str	r3, [r2, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db0b      	blt.n	8000aea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 021f 	and.w	r2, r3, #31
 8000ad8:	4907      	ldr	r1, [pc, #28]	; (8000af8 <__NVIC_EnableIRQ+0x38>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	095b      	lsrs	r3, r3, #5
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e100 	.word	0xe000e100

08000afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db0a      	blt.n	8000b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	; (8000b48 <__NVIC_SetPriority+0x4c>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b24:	e00a      	b.n	8000b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4908      	ldr	r1, [pc, #32]	; (8000b4c <__NVIC_SetPriority+0x50>)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	3b04      	subs	r3, #4
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	440b      	add	r3, r1
 8000b3a:	761a      	strb	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000e100 	.word	0xe000e100
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	; 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	f1c3 0307 	rsb	r3, r3, #7
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	bf28      	it	cs
 8000b6e:	2304      	movcs	r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3304      	adds	r3, #4
 8000b76:	2b06      	cmp	r3, #6
 8000b78:	d902      	bls.n	8000b80 <NVIC_EncodePriority+0x30>
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3b03      	subs	r3, #3
 8000b7e:	e000      	b.n	8000b82 <NVIC_EncodePriority+0x32>
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	43d9      	mvns	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	4313      	orrs	r3, r2
         );
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3724      	adds	r7, #36	; 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ff4c 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bda:	f7ff ff63 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000bde:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	68b9      	ldr	r1, [r7, #8]
 8000be4:	6978      	ldr	r0, [r7, #20]
 8000be6:	f7ff ffb3 	bl	8000b50 <NVIC_EncodePriority>
 8000bea:	4602      	mov	r2, r0
 8000bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff82 	bl	8000afc <__NVIC_SetPriority>
}
 8000bf8:	bf00      	nop
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ff56 	bl	8000ac0 <__NVIC_EnableIRQ>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b087      	sub	sp, #28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c2a:	e15a      	b.n	8000ee2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	2101      	movs	r1, #1
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	fa01 f303 	lsl.w	r3, r1, r3
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f000 814c 	beq.w	8000edc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f003 0303 	and.w	r3, r3, #3
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d005      	beq.n	8000c5c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d130      	bne.n	8000cbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	2203      	movs	r2, #3
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c92:	2201      	movs	r2, #1
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	091b      	lsrs	r3, r3, #4
 8000ca8:	f003 0201 	and.w	r2, r3, #1
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	2b03      	cmp	r3, #3
 8000cc8:	d017      	beq.n	8000cfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d123      	bne.n	8000d4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	08da      	lsrs	r2, r3, #3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3208      	adds	r2, #8
 8000d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	691a      	ldr	r2, [r3, #16]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	f003 0307 	and.w	r3, r3, #7
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	08da      	lsrs	r2, r3, #3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3208      	adds	r2, #8
 8000d48:	6939      	ldr	r1, [r7, #16]
 8000d4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0203 	and.w	r2, r3, #3
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f000 80a6 	beq.w	8000edc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d90:	4b5b      	ldr	r3, [pc, #364]	; (8000f00 <HAL_GPIO_Init+0x2e4>)
 8000d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d94:	4a5a      	ldr	r2, [pc, #360]	; (8000f00 <HAL_GPIO_Init+0x2e4>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6613      	str	r3, [r2, #96]	; 0x60
 8000d9c:	4b58      	ldr	r3, [pc, #352]	; (8000f00 <HAL_GPIO_Init+0x2e4>)
 8000d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000da8:	4a56      	ldr	r2, [pc, #344]	; (8000f04 <HAL_GPIO_Init+0x2e8>)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	089b      	lsrs	r3, r3, #2
 8000dae:	3302      	adds	r3, #2
 8000db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dd2:	d01f      	beq.n	8000e14 <HAL_GPIO_Init+0x1f8>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a4c      	ldr	r2, [pc, #304]	; (8000f08 <HAL_GPIO_Init+0x2ec>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d019      	beq.n	8000e10 <HAL_GPIO_Init+0x1f4>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a4b      	ldr	r2, [pc, #300]	; (8000f0c <HAL_GPIO_Init+0x2f0>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d013      	beq.n	8000e0c <HAL_GPIO_Init+0x1f0>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a4a      	ldr	r2, [pc, #296]	; (8000f10 <HAL_GPIO_Init+0x2f4>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d00d      	beq.n	8000e08 <HAL_GPIO_Init+0x1ec>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a49      	ldr	r2, [pc, #292]	; (8000f14 <HAL_GPIO_Init+0x2f8>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d007      	beq.n	8000e04 <HAL_GPIO_Init+0x1e8>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a48      	ldr	r2, [pc, #288]	; (8000f18 <HAL_GPIO_Init+0x2fc>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d101      	bne.n	8000e00 <HAL_GPIO_Init+0x1e4>
 8000dfc:	2305      	movs	r3, #5
 8000dfe:	e00a      	b.n	8000e16 <HAL_GPIO_Init+0x1fa>
 8000e00:	2306      	movs	r3, #6
 8000e02:	e008      	b.n	8000e16 <HAL_GPIO_Init+0x1fa>
 8000e04:	2304      	movs	r3, #4
 8000e06:	e006      	b.n	8000e16 <HAL_GPIO_Init+0x1fa>
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e004      	b.n	8000e16 <HAL_GPIO_Init+0x1fa>
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	e002      	b.n	8000e16 <HAL_GPIO_Init+0x1fa>
 8000e10:	2301      	movs	r3, #1
 8000e12:	e000      	b.n	8000e16 <HAL_GPIO_Init+0x1fa>
 8000e14:	2300      	movs	r3, #0
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	f002 0203 	and.w	r2, r2, #3
 8000e1c:	0092      	lsls	r2, r2, #2
 8000e1e:	4093      	lsls	r3, r2
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e26:	4937      	ldr	r1, [pc, #220]	; (8000f04 <HAL_GPIO_Init+0x2e8>)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e34:	4b39      	ldr	r3, [pc, #228]	; (8000f1c <HAL_GPIO_Init+0x300>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e58:	4a30      	ldr	r2, [pc, #192]	; (8000f1c <HAL_GPIO_Init+0x300>)
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <HAL_GPIO_Init+0x300>)
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e82:	4a26      	ldr	r2, [pc, #152]	; (8000f1c <HAL_GPIO_Init+0x300>)
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <HAL_GPIO_Init+0x300>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000eac:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <HAL_GPIO_Init+0x300>)
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <HAL_GPIO_Init+0x300>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ed6:	4a11      	ldr	r2, [pc, #68]	; (8000f1c <HAL_GPIO_Init+0x300>)
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f47f ae9d 	bne.w	8000c2c <HAL_GPIO_Init+0x10>
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	371c      	adds	r7, #28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40010000 	.word	0x40010000
 8000f08:	48000400 	.word	0x48000400
 8000f0c:	48000800 	.word	0x48000800
 8000f10:	48000c00 	.word	0x48000c00
 8000f14:	48001000 	.word	0x48001000
 8000f18:	48001400 	.word	0x48001400
 8000f1c:	40010400 	.word	0x40010400

08000f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	807b      	strh	r3, [r7, #2]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f30:	787b      	ldrb	r3, [r7, #1]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f36:	887a      	ldrh	r2, [r7, #2]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f3c:	e002      	b.n	8000f44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f3e:	887a      	ldrh	r2, [r7, #2]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d141      	bne.n	8000fe2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f5e:	4b4b      	ldr	r3, [pc, #300]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f6a:	d131      	bne.n	8000fd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f6c:	4b47      	ldr	r3, [pc, #284]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f72:	4a46      	ldr	r2, [pc, #280]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f7c:	4b43      	ldr	r3, [pc, #268]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f84:	4a41      	ldr	r2, [pc, #260]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f8c:	4b40      	ldr	r3, [pc, #256]	; (8001090 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2232      	movs	r2, #50	; 0x32
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	4a3f      	ldr	r2, [pc, #252]	; (8001094 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f98:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9c:	0c9b      	lsrs	r3, r3, #18
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fa2:	e002      	b.n	8000faa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000faa:	4b38      	ldr	r3, [pc, #224]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fb6:	d102      	bne.n	8000fbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f2      	bne.n	8000fa4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fbe:	4b33      	ldr	r3, [pc, #204]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fca:	d158      	bne.n	800107e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e057      	b.n	8001080 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fd0:	4b2e      	ldr	r3, [pc, #184]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fd6:	4a2d      	ldr	r2, [pc, #180]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000fe0:	e04d      	b.n	800107e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fe8:	d141      	bne.n	800106e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff6:	d131      	bne.n	800105c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ff8:	4b24      	ldr	r3, [pc, #144]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ffe:	4a23      	ldr	r2, [pc, #140]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001004:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001008:	4b20      	ldr	r3, [pc, #128]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001010:	4a1e      	ldr	r2, [pc, #120]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001016:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2232      	movs	r2, #50	; 0x32
 800101e:	fb02 f303 	mul.w	r3, r2, r3
 8001022:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001024:	fba2 2303 	umull	r2, r3, r2, r3
 8001028:	0c9b      	lsrs	r3, r3, #18
 800102a:	3301      	adds	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800102e:	e002      	b.n	8001036 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3b01      	subs	r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001042:	d102      	bne.n	800104a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f2      	bne.n	8001030 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001056:	d112      	bne.n	800107e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e011      	b.n	8001080 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800105e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001068:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800106c:	e007      	b.n	800107e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001076:	4a05      	ldr	r2, [pc, #20]	; (800108c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001078:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800107c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	40007000 	.word	0x40007000
 8001090:	20000000 	.word	0x20000000
 8001094:	431bde83 	.word	0x431bde83

08001098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e306      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d075      	beq.n	80011a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010b6:	4b97      	ldr	r3, [pc, #604]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010c0:	4b94      	ldr	r3, [pc, #592]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	2b0c      	cmp	r3, #12
 80010ce:	d102      	bne.n	80010d6 <HAL_RCC_OscConfig+0x3e>
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d002      	beq.n	80010dc <HAL_RCC_OscConfig+0x44>
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d10b      	bne.n	80010f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010dc:	4b8d      	ldr	r3, [pc, #564]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d05b      	beq.n	80011a0 <HAL_RCC_OscConfig+0x108>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d157      	bne.n	80011a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e2e1      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010fc:	d106      	bne.n	800110c <HAL_RCC_OscConfig+0x74>
 80010fe:	4b85      	ldr	r3, [pc, #532]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a84      	ldr	r2, [pc, #528]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 8001104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e01d      	b.n	8001148 <HAL_RCC_OscConfig+0xb0>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001114:	d10c      	bne.n	8001130 <HAL_RCC_OscConfig+0x98>
 8001116:	4b7f      	ldr	r3, [pc, #508]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a7e      	ldr	r2, [pc, #504]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b7c      	ldr	r3, [pc, #496]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a7b      	ldr	r2, [pc, #492]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e00b      	b.n	8001148 <HAL_RCC_OscConfig+0xb0>
 8001130:	4b78      	ldr	r3, [pc, #480]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a77      	ldr	r2, [pc, #476]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 8001136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b75      	ldr	r3, [pc, #468]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a74      	ldr	r2, [pc, #464]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 8001142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d013      	beq.n	8001178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001150:	f7ff fc78 	bl	8000a44 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fc74 	bl	8000a44 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e2a6      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800116a:	4b6a      	ldr	r3, [pc, #424]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0xc0>
 8001176:	e014      	b.n	80011a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001178:	f7ff fc64 	bl	8000a44 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fc60 	bl	8000a44 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	; 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e292      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001192:	4b60      	ldr	r3, [pc, #384]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0xe8>
 800119e:	e000      	b.n	80011a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d075      	beq.n	800129a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ae:	4b59      	ldr	r3, [pc, #356]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011b8:	4b56      	ldr	r3, [pc, #344]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	2b0c      	cmp	r3, #12
 80011c6:	d102      	bne.n	80011ce <HAL_RCC_OscConfig+0x136>
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d002      	beq.n	80011d4 <HAL_RCC_OscConfig+0x13c>
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	d11f      	bne.n	8001214 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011d4:	4b4f      	ldr	r3, [pc, #316]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <HAL_RCC_OscConfig+0x154>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e265      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ec:	4b49      	ldr	r3, [pc, #292]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	061b      	lsls	r3, r3, #24
 80011fa:	4946      	ldr	r1, [pc, #280]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001200:	4b45      	ldr	r3, [pc, #276]	; (8001318 <HAL_RCC_OscConfig+0x280>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fa83 	bl	8000710 <HAL_InitTick>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d043      	beq.n	8001298 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e251      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d023      	beq.n	8001264 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800121c:	4b3d      	ldr	r3, [pc, #244]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a3c      	ldr	r2, [pc, #240]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 8001222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001228:	f7ff fc0c 	bl	8000a44 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001230:	f7ff fc08 	bl	8000a44 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e23a      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001242:	4b34      	ldr	r3, [pc, #208]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4b31      	ldr	r3, [pc, #196]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	061b      	lsls	r3, r3, #24
 800125c:	492d      	ldr	r1, [pc, #180]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 800125e:	4313      	orrs	r3, r2
 8001260:	604b      	str	r3, [r1, #4]
 8001262:	e01a      	b.n	800129a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001264:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a2a      	ldr	r2, [pc, #168]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 800126a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800126e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001270:	f7ff fbe8 	bl	8000a44 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001278:	f7ff fbe4 	bl	8000a44 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e216      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800128a:	4b22      	ldr	r3, [pc, #136]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f0      	bne.n	8001278 <HAL_RCC_OscConfig+0x1e0>
 8001296:	e000      	b.n	800129a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001298:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d041      	beq.n	800132a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d01c      	beq.n	80012e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 80012b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012b4:	4a17      	ldr	r2, [pc, #92]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012be:	f7ff fbc1 	bl	8000a44 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c6:	f7ff fbbd 	bl	8000a44 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e1ef      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 80012da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0ef      	beq.n	80012c6 <HAL_RCC_OscConfig+0x22e>
 80012e6:	e020      	b.n	800132a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 80012ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ee:	4a09      	ldr	r2, [pc, #36]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 80012f0:	f023 0301 	bic.w	r3, r3, #1
 80012f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f8:	f7ff fba4 	bl	8000a44 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012fe:	e00d      	b.n	800131c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001300:	f7ff fba0 	bl	8000a44 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d906      	bls.n	800131c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e1d2      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800131c:	4b8c      	ldr	r3, [pc, #560]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 800131e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1ea      	bne.n	8001300 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 80a6 	beq.w	8001484 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001338:	2300      	movs	r3, #0
 800133a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800133c:	4b84      	ldr	r3, [pc, #528]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_RCC_OscConfig+0x2b4>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <HAL_RCC_OscConfig+0x2b6>
 800134c:	2300      	movs	r3, #0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00d      	beq.n	800136e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	4b7f      	ldr	r3, [pc, #508]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 8001354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001356:	4a7e      	ldr	r2, [pc, #504]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135c:	6593      	str	r3, [r2, #88]	; 0x58
 800135e:	4b7c      	ldr	r3, [pc, #496]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800136a:	2301      	movs	r3, #1
 800136c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800136e:	4b79      	ldr	r3, [pc, #484]	; (8001554 <HAL_RCC_OscConfig+0x4bc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d118      	bne.n	80013ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800137a:	4b76      	ldr	r3, [pc, #472]	; (8001554 <HAL_RCC_OscConfig+0x4bc>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a75      	ldr	r2, [pc, #468]	; (8001554 <HAL_RCC_OscConfig+0x4bc>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001386:	f7ff fb5d 	bl	8000a44 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138e:	f7ff fb59 	bl	8000a44 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e18b      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013a0:	4b6c      	ldr	r3, [pc, #432]	; (8001554 <HAL_RCC_OscConfig+0x4bc>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d108      	bne.n	80013c6 <HAL_RCC_OscConfig+0x32e>
 80013b4:	4b66      	ldr	r3, [pc, #408]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 80013b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ba:	4a65      	ldr	r2, [pc, #404]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013c4:	e024      	b.n	8001410 <HAL_RCC_OscConfig+0x378>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b05      	cmp	r3, #5
 80013cc:	d110      	bne.n	80013f0 <HAL_RCC_OscConfig+0x358>
 80013ce:	4b60      	ldr	r3, [pc, #384]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 80013d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d4:	4a5e      	ldr	r2, [pc, #376]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013de:	4b5c      	ldr	r3, [pc, #368]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 80013e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013e4:	4a5a      	ldr	r2, [pc, #360]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013ee:	e00f      	b.n	8001410 <HAL_RCC_OscConfig+0x378>
 80013f0:	4b57      	ldr	r3, [pc, #348]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 80013f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f6:	4a56      	ldr	r2, [pc, #344]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001400:	4b53      	ldr	r3, [pc, #332]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 8001402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001406:	4a52      	ldr	r2, [pc, #328]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 8001408:	f023 0304 	bic.w	r3, r3, #4
 800140c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d016      	beq.n	8001446 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001418:	f7ff fb14 	bl	8000a44 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800141e:	e00a      	b.n	8001436 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001420:	f7ff fb10 	bl	8000a44 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f241 3288 	movw	r2, #5000	; 0x1388
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e140      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001436:	4b46      	ldr	r3, [pc, #280]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 8001438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0ed      	beq.n	8001420 <HAL_RCC_OscConfig+0x388>
 8001444:	e015      	b.n	8001472 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001446:	f7ff fafd 	bl	8000a44 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800144c:	e00a      	b.n	8001464 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144e:	f7ff faf9 	bl	8000a44 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	f241 3288 	movw	r2, #5000	; 0x1388
 800145c:	4293      	cmp	r3, r2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e129      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001464:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 8001466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1ed      	bne.n	800144e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001472:	7ffb      	ldrb	r3, [r7, #31]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d105      	bne.n	8001484 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001478:	4b35      	ldr	r3, [pc, #212]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 800147a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147c:	4a34      	ldr	r2, [pc, #208]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 800147e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001482:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0320 	and.w	r3, r3, #32
 800148c:	2b00      	cmp	r3, #0
 800148e:	d03c      	beq.n	800150a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d01c      	beq.n	80014d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001498:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 800149a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800149e:	4a2c      	ldr	r2, [pc, #176]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a8:	f7ff facc 	bl	8000a44 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014b0:	f7ff fac8 	bl	8000a44 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e0fa      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014c2:	4b23      	ldr	r3, [pc, #140]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 80014c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0ef      	beq.n	80014b0 <HAL_RCC_OscConfig+0x418>
 80014d0:	e01b      	b.n	800150a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014d2:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 80014d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014d8:	4a1d      	ldr	r2, [pc, #116]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 80014da:	f023 0301 	bic.w	r3, r3, #1
 80014de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e2:	f7ff faaf 	bl	8000a44 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014ea:	f7ff faab 	bl	8000a44 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e0dd      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 80014fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1ef      	bne.n	80014ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 80d1 	beq.w	80016b6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 030c 	and.w	r3, r3, #12
 800151c:	2b0c      	cmp	r3, #12
 800151e:	f000 808b 	beq.w	8001638 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d15e      	bne.n	80015e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a08      	ldr	r2, [pc, #32]	; (8001550 <HAL_RCC_OscConfig+0x4b8>)
 8001530:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001536:	f7ff fa85 	bl	8000a44 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800153c:	e00c      	b.n	8001558 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153e:	f7ff fa81 	bl	8000a44 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d905      	bls.n	8001558 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e0b3      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>
 8001550:	40021000 	.word	0x40021000
 8001554:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001558:	4b59      	ldr	r3, [pc, #356]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1ec      	bne.n	800153e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001564:	4b56      	ldr	r3, [pc, #344]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	4b56      	ldr	r3, [pc, #344]	; (80016c4 <HAL_RCC_OscConfig+0x62c>)
 800156a:	4013      	ands	r3, r2
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6a11      	ldr	r1, [r2, #32]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001574:	3a01      	subs	r2, #1
 8001576:	0112      	lsls	r2, r2, #4
 8001578:	4311      	orrs	r1, r2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800157e:	0212      	lsls	r2, r2, #8
 8001580:	4311      	orrs	r1, r2
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001586:	0852      	lsrs	r2, r2, #1
 8001588:	3a01      	subs	r2, #1
 800158a:	0552      	lsls	r2, r2, #21
 800158c:	4311      	orrs	r1, r2
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001592:	0852      	lsrs	r2, r2, #1
 8001594:	3a01      	subs	r2, #1
 8001596:	0652      	lsls	r2, r2, #25
 8001598:	4311      	orrs	r1, r2
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800159e:	06d2      	lsls	r2, r2, #27
 80015a0:	430a      	orrs	r2, r1
 80015a2:	4947      	ldr	r1, [pc, #284]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015a8:	4b45      	ldr	r3, [pc, #276]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a44      	ldr	r2, [pc, #272]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80015ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015b4:	4b42      	ldr	r3, [pc, #264]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	4a41      	ldr	r2, [pc, #260]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80015ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff fa40 	bl	8000a44 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c8:	f7ff fa3c 	bl	8000a44 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e06e      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015da:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0x530>
 80015e6:	e066      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e8:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a34      	ldr	r2, [pc, #208]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80015ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015f2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80015f4:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4a31      	ldr	r2, [pc, #196]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80015fa:	f023 0303 	bic.w	r3, r3, #3
 80015fe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001600:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	4a2e      	ldr	r2, [pc, #184]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001606:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800160a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fa18 	bl	8000a44 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff fa14 	bl	8000a44 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e046      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800162a:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x580>
 8001636:	e03e      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e039      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001644:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f003 0203 	and.w	r2, r3, #3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	429a      	cmp	r2, r3
 8001656:	d12c      	bne.n	80016b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	3b01      	subs	r3, #1
 8001664:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001666:	429a      	cmp	r2, r3
 8001668:	d123      	bne.n	80016b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001676:	429a      	cmp	r2, r3
 8001678:	d11b      	bne.n	80016b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001686:	429a      	cmp	r2, r3
 8001688:	d113      	bne.n	80016b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	085b      	lsrs	r3, r3, #1
 8001696:	3b01      	subs	r3, #1
 8001698:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800169a:	429a      	cmp	r2, r3
 800169c:	d109      	bne.n	80016b2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a8:	085b      	lsrs	r3, r3, #1
 80016aa:	3b01      	subs	r3, #1
 80016ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3720      	adds	r7, #32
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000
 80016c4:	019f800c 	.word	0x019f800c

080016c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e11e      	b.n	800191e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016e0:	4b91      	ldr	r3, [pc, #580]	; (8001928 <HAL_RCC_ClockConfig+0x260>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 030f 	and.w	r3, r3, #15
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d910      	bls.n	8001710 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ee:	4b8e      	ldr	r3, [pc, #568]	; (8001928 <HAL_RCC_ClockConfig+0x260>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 020f 	bic.w	r2, r3, #15
 80016f6:	498c      	ldr	r1, [pc, #560]	; (8001928 <HAL_RCC_ClockConfig+0x260>)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fe:	4b8a      	ldr	r3, [pc, #552]	; (8001928 <HAL_RCC_ClockConfig+0x260>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e106      	b.n	800191e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d073      	beq.n	8001804 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d129      	bne.n	8001778 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001724:	4b81      	ldr	r3, [pc, #516]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0f4      	b.n	800191e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001734:	f000 f9d0 	bl	8001ad8 <RCC_GetSysClockFreqFromPLLSource>
 8001738:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4a7c      	ldr	r2, [pc, #496]	; (8001930 <HAL_RCC_ClockConfig+0x268>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d93f      	bls.n	80017c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001742:	4b7a      	ldr	r3, [pc, #488]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d009      	beq.n	8001762 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001756:	2b00      	cmp	r3, #0
 8001758:	d033      	beq.n	80017c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800175e:	2b00      	cmp	r3, #0
 8001760:	d12f      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001762:	4b72      	ldr	r3, [pc, #456]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800176a:	4a70      	ldr	r2, [pc, #448]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 800176c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001770:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	e024      	b.n	80017c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d107      	bne.n	8001790 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001780:	4b6a      	ldr	r3, [pc, #424]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d109      	bne.n	80017a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0c6      	b.n	800191e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001790:	4b66      	ldr	r3, [pc, #408]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0be      	b.n	800191e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80017a0:	f000 f8ce 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4a61      	ldr	r2, [pc, #388]	; (8001930 <HAL_RCC_ClockConfig+0x268>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d909      	bls.n	80017c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017ae:	4b5f      	ldr	r3, [pc, #380]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017b6:	4a5d      	ldr	r2, [pc, #372]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 80017b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017c2:	4b5a      	ldr	r3, [pc, #360]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f023 0203 	bic.w	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4957      	ldr	r1, [pc, #348]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017d4:	f7ff f936 	bl	8000a44 <HAL_GetTick>
 80017d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017dc:	f7ff f932 	bl	8000a44 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e095      	b.n	800191e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f2:	4b4e      	ldr	r3, [pc, #312]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 020c 	and.w	r2, r3, #12
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	429a      	cmp	r2, r3
 8001802:	d1eb      	bne.n	80017dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d023      	beq.n	8001858 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800181c:	4b43      	ldr	r3, [pc, #268]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4a42      	ldr	r2, [pc, #264]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 8001822:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001826:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b00      	cmp	r3, #0
 8001832:	d007      	beq.n	8001844 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001834:	4b3d      	ldr	r3, [pc, #244]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800183c:	4a3b      	ldr	r2, [pc, #236]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 800183e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001842:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001844:	4b39      	ldr	r3, [pc, #228]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4936      	ldr	r1, [pc, #216]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
 8001856:	e008      	b.n	800186a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2b80      	cmp	r3, #128	; 0x80
 800185c:	d105      	bne.n	800186a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800185e:	4b33      	ldr	r3, [pc, #204]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	4a32      	ldr	r2, [pc, #200]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 8001864:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001868:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800186a:	4b2f      	ldr	r3, [pc, #188]	; (8001928 <HAL_RCC_ClockConfig+0x260>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d21d      	bcs.n	80018b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <HAL_RCC_ClockConfig+0x260>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 020f 	bic.w	r2, r3, #15
 8001880:	4929      	ldr	r1, [pc, #164]	; (8001928 <HAL_RCC_ClockConfig+0x260>)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001888:	f7ff f8dc 	bl	8000a44 <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001890:	f7ff f8d8 	bl	8000a44 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	; 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e03b      	b.n	800191e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_RCC_ClockConfig+0x260>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d1ed      	bne.n	8001890 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d008      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c0:	4b1a      	ldr	r3, [pc, #104]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	4917      	ldr	r1, [pc, #92]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	490f      	ldr	r1, [pc, #60]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018f2:	f000 f825 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 80018f6:	4602      	mov	r2, r0
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_RCC_ClockConfig+0x264>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	490c      	ldr	r1, [pc, #48]	; (8001934 <HAL_RCC_ClockConfig+0x26c>)
 8001904:	5ccb      	ldrb	r3, [r1, r3]
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	fa22 f303 	lsr.w	r3, r2, r3
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_RCC_ClockConfig+0x270>)
 8001910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_RCC_ClockConfig+0x274>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fefa 	bl	8000710 <HAL_InitTick>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40022000 	.word	0x40022000
 800192c:	40021000 	.word	0x40021000
 8001930:	04c4b400 	.word	0x04c4b400
 8001934:	08005f58 	.word	0x08005f58
 8001938:	20000000 	.word	0x20000000
 800193c:	20000004 	.word	0x20000004

08001940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001946:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b04      	cmp	r3, #4
 8001950:	d102      	bne.n	8001958 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001952:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	e047      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001958:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	2b08      	cmp	r3, #8
 8001962:	d102      	bne.n	800196a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001964:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	e03e      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800196a:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b0c      	cmp	r3, #12
 8001974:	d136      	bne.n	80019e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	3301      	adds	r3, #1
 800198c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b03      	cmp	r3, #3
 8001992:	d10c      	bne.n	80019ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001994:	4a1a      	ldr	r2, [pc, #104]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	fbb2 f3f3 	udiv	r3, r2, r3
 800199c:	4a16      	ldr	r2, [pc, #88]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800199e:	68d2      	ldr	r2, [r2, #12]
 80019a0:	0a12      	lsrs	r2, r2, #8
 80019a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019a6:	fb02 f303 	mul.w	r3, r2, r3
 80019aa:	617b      	str	r3, [r7, #20]
      break;
 80019ac:	e00c      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019ae:	4a13      	ldr	r2, [pc, #76]	; (80019fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b6:	4a10      	ldr	r2, [pc, #64]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019b8:	68d2      	ldr	r2, [r2, #12]
 80019ba:	0a12      	lsrs	r2, r2, #8
 80019bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019c0:	fb02 f303 	mul.w	r3, r2, r3
 80019c4:	617b      	str	r3, [r7, #20]
      break;
 80019c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0e5b      	lsrs	r3, r3, #25
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	3301      	adds	r3, #1
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	e001      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80019e8:	693b      	ldr	r3, [r7, #16]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	371c      	adds	r7, #28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	00f42400 	.word	0x00f42400
 8001a00:	007a1200 	.word	0x007a1200

08001a04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000000 	.word	0x20000000

08001a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001a20:	f7ff fff0 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a24:	4602      	mov	r2, r0
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	0a1b      	lsrs	r3, r3, #8
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	4904      	ldr	r1, [pc, #16]	; (8001a44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a32:	5ccb      	ldrb	r3, [r1, r3]
 8001a34:	f003 031f 	and.w	r3, r3, #31
 8001a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000
 8001a44:	08005f68 	.word	0x08005f68

08001a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001a4c:	f7ff ffda 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a50:	4602      	mov	r2, r0
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	0adb      	lsrs	r3, r3, #11
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	4904      	ldr	r1, [pc, #16]	; (8001a70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a5e:	5ccb      	ldrb	r3, [r1, r3]
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	08005f68 	.word	0x08005f68

08001a74 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	220f      	movs	r2, #15
 8001a82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0203 	and.w	r2, r3, #3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	08db      	lsrs	r3, r3, #3
 8001aae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <HAL_RCC_GetClockConfig+0x60>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 020f 	and.w	r2, r3, #15
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	601a      	str	r2, [r3, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40022000 	.word	0x40022000

08001ad8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	3301      	adds	r3, #1
 8001af4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d10c      	bne.n	8001b16 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001afc:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b04:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b06:	68d2      	ldr	r2, [r2, #12]
 8001b08:	0a12      	lsrs	r2, r2, #8
 8001b0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b0e:	fb02 f303 	mul.w	r3, r2, r3
 8001b12:	617b      	str	r3, [r7, #20]
    break;
 8001b14:	e00c      	b.n	8001b30 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b16:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1e:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b20:	68d2      	ldr	r2, [r2, #12]
 8001b22:	0a12      	lsrs	r2, r2, #8
 8001b24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b28:	fb02 f303 	mul.w	r3, r2, r3
 8001b2c:	617b      	str	r3, [r7, #20]
    break;
 8001b2e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	0e5b      	lsrs	r3, r3, #25
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b48:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001b4a:	687b      	ldr	r3, [r7, #4]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	371c      	adds	r7, #28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	007a1200 	.word	0x007a1200
 8001b60:	00f42400 	.word	0x00f42400

08001b64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b70:	2300      	movs	r3, #0
 8001b72:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 8098 	beq.w	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b86:	4b43      	ldr	r3, [pc, #268]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10d      	bne.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	4b40      	ldr	r3, [pc, #256]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	4a3f      	ldr	r2, [pc, #252]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b9e:	4b3d      	ldr	r3, [pc, #244]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001baa:	2301      	movs	r3, #1
 8001bac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bae:	4b3a      	ldr	r3, [pc, #232]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a39      	ldr	r2, [pc, #228]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001bba:	f7fe ff43 	bl	8000a44 <HAL_GetTick>
 8001bbe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bc0:	e009      	b.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc2:	f7fe ff3f 	bl	8000a44 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d902      	bls.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	74fb      	strb	r3, [r7, #19]
        break;
 8001bd4:	e005      	b.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bd6:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0ef      	beq.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001be2:	7cfb      	ldrb	r3, [r7, #19]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d159      	bne.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001be8:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d01e      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d019      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c04:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c10:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c16:	4a1f      	ldr	r2, [pc, #124]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c20:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c26:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c30:	4a18      	ldr	r2, [pc, #96]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d016      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7fe feff 	bl	8000a44 <HAL_GetTick>
 8001c46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c48:	e00b      	b.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4a:	f7fe fefb 	bl	8000a44 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d902      	bls.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	74fb      	strb	r3, [r7, #19]
            break;
 8001c60:	e006      	b.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0ec      	beq.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001c70:	7cfb      	ldrb	r3, [r7, #19]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10b      	bne.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	4903      	ldr	r1, [pc, #12]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c8e:	7cfb      	ldrb	r3, [r7, #19]
 8001c90:	74bb      	strb	r3, [r7, #18]
 8001c92:	e005      	b.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c9c:	7cfb      	ldrb	r3, [r7, #19]
 8001c9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ca0:	7c7b      	ldrb	r3, [r7, #17]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d105      	bne.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca6:	4ba6      	ldr	r3, [pc, #664]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001caa:	4aa5      	ldr	r2, [pc, #660]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00a      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cbe:	4ba0      	ldr	r3, [pc, #640]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc4:	f023 0203 	bic.w	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	499c      	ldr	r1, [pc, #624]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00a      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ce0:	4b97      	ldr	r3, [pc, #604]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce6:	f023 020c 	bic.w	r2, r3, #12
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	4994      	ldr	r1, [pc, #592]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00a      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d02:	4b8f      	ldr	r3, [pc, #572]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	498b      	ldr	r1, [pc, #556]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00a      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d24:	4b86      	ldr	r3, [pc, #536]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	4983      	ldr	r1, [pc, #524]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0320 	and.w	r3, r3, #32
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00a      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d46:	4b7e      	ldr	r3, [pc, #504]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	497a      	ldr	r1, [pc, #488]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00a      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d68:	4b75      	ldr	r3, [pc, #468]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	4972      	ldr	r1, [pc, #456]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00a      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d8a:	4b6d      	ldr	r3, [pc, #436]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	4969      	ldr	r1, [pc, #420]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00a      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001dac:	4b64      	ldr	r3, [pc, #400]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	4961      	ldr	r1, [pc, #388]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00a      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001dce:	4b5c      	ldr	r3, [pc, #368]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	4958      	ldr	r1, [pc, #352]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d015      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001df0:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	4950      	ldr	r1, [pc, #320]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e0e:	d105      	bne.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e10:	4b4b      	ldr	r3, [pc, #300]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4a4a      	ldr	r2, [pc, #296]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d015      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e28:	4b45      	ldr	r3, [pc, #276]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e36:	4942      	ldr	r1, [pc, #264]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e46:	d105      	bne.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e48:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	4a3c      	ldr	r2, [pc, #240]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e52:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d015      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001e60:	4b37      	ldr	r3, [pc, #220]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4934      	ldr	r1, [pc, #208]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e7e:	d105      	bne.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e80:	4b2f      	ldr	r3, [pc, #188]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4a2e      	ldr	r2, [pc, #184]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d015      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e98:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea6:	4926      	ldr	r1, [pc, #152]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001eb6:	d105      	bne.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4a20      	ldr	r2, [pc, #128]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ec2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d015      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	4918      	ldr	r1, [pc, #96]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001eee:	d105      	bne.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001efa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d015      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f16:	490a      	ldr	r1, [pc, #40]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f26:	d105      	bne.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001f34:	7cbb      	ldrb	r3, [r7, #18]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000

08001f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e049      	b.n	8001fea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f841 	bl	8001ff2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2202      	movs	r2, #2
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3304      	adds	r3, #4
 8001f80:	4619      	mov	r1, r3
 8001f82:	4610      	mov	r0, r2
 8001f84:	f000 fa52 	bl	800242c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b01      	cmp	r3, #1
 800201a:	d001      	beq.n	8002020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e04a      	b.n	80020b6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a21      	ldr	r2, [pc, #132]	; (80020c4 <HAL_TIM_Base_Start_IT+0xbc>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d018      	beq.n	8002074 <HAL_TIM_Base_Start_IT+0x6c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204a:	d013      	beq.n	8002074 <HAL_TIM_Base_Start_IT+0x6c>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a1d      	ldr	r2, [pc, #116]	; (80020c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00e      	beq.n	8002074 <HAL_TIM_Base_Start_IT+0x6c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a1c      	ldr	r2, [pc, #112]	; (80020cc <HAL_TIM_Base_Start_IT+0xc4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d009      	beq.n	8002074 <HAL_TIM_Base_Start_IT+0x6c>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1a      	ldr	r2, [pc, #104]	; (80020d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d004      	beq.n	8002074 <HAL_TIM_Base_Start_IT+0x6c>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d115      	bne.n	80020a0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800207c:	4013      	ands	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b06      	cmp	r3, #6
 8002084:	d015      	beq.n	80020b2 <HAL_TIM_Base_Start_IT+0xaa>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800208c:	d011      	beq.n	80020b2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0201 	orr.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209e:	e008      	b.n	80020b2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	e000      	b.n	80020b4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40012c00 	.word	0x40012c00
 80020c8:	40000400 	.word	0x40000400
 80020cc:	40000800 	.word	0x40000800
 80020d0:	40013400 	.word	0x40013400
 80020d4:	40014000 	.word	0x40014000
 80020d8:	00010007 	.word	0x00010007

080020dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d122      	bne.n	8002138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d11b      	bne.n	8002138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0202 	mvn.w	r2, #2
 8002108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f965 	bl	80023ee <HAL_TIM_IC_CaptureCallback>
 8002124:	e005      	b.n	8002132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f957 	bl	80023da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f968 	bl	8002402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b04      	cmp	r3, #4
 8002144:	d122      	bne.n	800218c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b04      	cmp	r3, #4
 8002152:	d11b      	bne.n	800218c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0204 	mvn.w	r2, #4
 800215c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2202      	movs	r2, #2
 8002162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f93b 	bl	80023ee <HAL_TIM_IC_CaptureCallback>
 8002178:	e005      	b.n	8002186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f92d 	bl	80023da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f93e 	bl	8002402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b08      	cmp	r3, #8
 8002198:	d122      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d11b      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0208 	mvn.w	r2, #8
 80021b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2204      	movs	r2, #4
 80021b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f911 	bl	80023ee <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f903 	bl	80023da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f914 	bl	8002402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d122      	bne.n	8002234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b10      	cmp	r3, #16
 80021fa:	d11b      	bne.n	8002234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0210 	mvn.w	r2, #16
 8002204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2208      	movs	r2, #8
 800220a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f8e7 	bl	80023ee <HAL_TIM_IC_CaptureCallback>
 8002220:	e005      	b.n	800222e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f8d9 	bl	80023da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f8ea 	bl	8002402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	d10e      	bne.n	8002260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	d107      	bne.n	8002260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0201 	mvn.w	r2, #1
 8002258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe fa18 	bl	8000690 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226a:	2b80      	cmp	r3, #128	; 0x80
 800226c:	d10e      	bne.n	800228c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002278:	2b80      	cmp	r3, #128	; 0x80
 800227a:	d107      	bne.n	800228c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f96a 	bl	8002560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800229a:	d10e      	bne.n	80022ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a6:	2b80      	cmp	r3, #128	; 0x80
 80022a8:	d107      	bne.n	80022ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80022b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f95d 	bl	8002574 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c4:	2b40      	cmp	r3, #64	; 0x40
 80022c6:	d10e      	bne.n	80022e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d2:	2b40      	cmp	r3, #64	; 0x40
 80022d4:	d107      	bne.n	80022e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f898 	bl	8002416 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d10e      	bne.n	8002312 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f003 0320 	and.w	r3, r3, #32
 80022fe:	2b20      	cmp	r3, #32
 8002300:	d107      	bne.n	8002312 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f06f 0220 	mvn.w	r2, #32
 800230a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f91d 	bl	800254c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002320:	d10f      	bne.n	8002342 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800232c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002330:	d107      	bne.n	8002342 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800233a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f923 	bl	8002588 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800234c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002350:	d10f      	bne.n	8002372 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800235c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002360:	d107      	bne.n	8002372 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800236a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f915 	bl	800259c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002380:	d10f      	bne.n	80023a2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002390:	d107      	bne.n	80023a2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800239a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f907 	bl	80025b0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023b0:	d10f      	bne.n	80023d2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023c0:	d107      	bne.n	80023d2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80023ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f8f9 	bl	80025c4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a3c      	ldr	r2, [pc, #240]	; (8002530 <TIM_Base_SetConfig+0x104>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d00f      	beq.n	8002464 <TIM_Base_SetConfig+0x38>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244a:	d00b      	beq.n	8002464 <TIM_Base_SetConfig+0x38>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a39      	ldr	r2, [pc, #228]	; (8002534 <TIM_Base_SetConfig+0x108>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d007      	beq.n	8002464 <TIM_Base_SetConfig+0x38>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a38      	ldr	r2, [pc, #224]	; (8002538 <TIM_Base_SetConfig+0x10c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d003      	beq.n	8002464 <TIM_Base_SetConfig+0x38>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a37      	ldr	r2, [pc, #220]	; (800253c <TIM_Base_SetConfig+0x110>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d108      	bne.n	8002476 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800246a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a2d      	ldr	r2, [pc, #180]	; (8002530 <TIM_Base_SetConfig+0x104>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d01b      	beq.n	80024b6 <TIM_Base_SetConfig+0x8a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002484:	d017      	beq.n	80024b6 <TIM_Base_SetConfig+0x8a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a2a      	ldr	r2, [pc, #168]	; (8002534 <TIM_Base_SetConfig+0x108>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d013      	beq.n	80024b6 <TIM_Base_SetConfig+0x8a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a29      	ldr	r2, [pc, #164]	; (8002538 <TIM_Base_SetConfig+0x10c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00f      	beq.n	80024b6 <TIM_Base_SetConfig+0x8a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a28      	ldr	r2, [pc, #160]	; (800253c <TIM_Base_SetConfig+0x110>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00b      	beq.n	80024b6 <TIM_Base_SetConfig+0x8a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a27      	ldr	r2, [pc, #156]	; (8002540 <TIM_Base_SetConfig+0x114>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d007      	beq.n	80024b6 <TIM_Base_SetConfig+0x8a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a26      	ldr	r2, [pc, #152]	; (8002544 <TIM_Base_SetConfig+0x118>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d003      	beq.n	80024b6 <TIM_Base_SetConfig+0x8a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a25      	ldr	r2, [pc, #148]	; (8002548 <TIM_Base_SetConfig+0x11c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d108      	bne.n	80024c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a10      	ldr	r2, [pc, #64]	; (8002530 <TIM_Base_SetConfig+0x104>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d00f      	beq.n	8002514 <TIM_Base_SetConfig+0xe8>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a11      	ldr	r2, [pc, #68]	; (800253c <TIM_Base_SetConfig+0x110>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d00b      	beq.n	8002514 <TIM_Base_SetConfig+0xe8>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a10      	ldr	r2, [pc, #64]	; (8002540 <TIM_Base_SetConfig+0x114>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d007      	beq.n	8002514 <TIM_Base_SetConfig+0xe8>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a0f      	ldr	r2, [pc, #60]	; (8002544 <TIM_Base_SetConfig+0x118>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d003      	beq.n	8002514 <TIM_Base_SetConfig+0xe8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a0e      	ldr	r2, [pc, #56]	; (8002548 <TIM_Base_SetConfig+0x11c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d103      	bne.n	800251c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	615a      	str	r2, [r3, #20]
}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40012c00 	.word	0x40012c00
 8002534:	40000400 	.word	0x40000400
 8002538:	40000800 	.word	0x40000800
 800253c:	40013400 	.word	0x40013400
 8002540:	40014000 	.word	0x40014000
 8002544:	40014400 	.word	0x40014400
 8002548:	40014800 	.word	0x40014800

0800254c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e042      	b.n	8002670 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d106      	bne.n	8002602 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7fe f975 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2224      	movs	r2, #36	; 0x24
 8002606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0201 	bic.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f82c 	bl	8002678 <UART_SetConfig>
 8002620:	4603      	mov	r3, r0
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e022      	b.n	8002670 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 faec 	bl	8002c10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002646:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002656:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fb73 	bl	8002d54 <UART_CheckIdleState>
 800266e:	4603      	mov	r3, r0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800267c:	b08c      	sub	sp, #48	; 0x30
 800267e:	af00      	add	r7, sp, #0
 8002680:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	431a      	orrs	r2, r3
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	431a      	orrs	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	4313      	orrs	r3, r2
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4bab      	ldr	r3, [pc, #684]	; (8002954 <UART_SetConfig+0x2dc>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026b0:	430b      	orrs	r3, r1
 80026b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4aa0      	ldr	r2, [pc, #640]	; (8002958 <UART_SetConfig+0x2e0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d004      	beq.n	80026e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026e0:	4313      	orrs	r3, r2
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80026ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	6812      	ldr	r2, [r2, #0]
 80026f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026f8:	430b      	orrs	r3, r1
 80026fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002702:	f023 010f 	bic.w	r1, r3, #15
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a91      	ldr	r2, [pc, #580]	; (800295c <UART_SetConfig+0x2e4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d125      	bne.n	8002768 <UART_SetConfig+0xf0>
 800271c:	4b90      	ldr	r3, [pc, #576]	; (8002960 <UART_SetConfig+0x2e8>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b03      	cmp	r3, #3
 8002728:	d81a      	bhi.n	8002760 <UART_SetConfig+0xe8>
 800272a:	a201      	add	r2, pc, #4	; (adr r2, 8002730 <UART_SetConfig+0xb8>)
 800272c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002730:	08002741 	.word	0x08002741
 8002734:	08002751 	.word	0x08002751
 8002738:	08002749 	.word	0x08002749
 800273c:	08002759 	.word	0x08002759
 8002740:	2301      	movs	r3, #1
 8002742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002746:	e0d6      	b.n	80028f6 <UART_SetConfig+0x27e>
 8002748:	2302      	movs	r3, #2
 800274a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800274e:	e0d2      	b.n	80028f6 <UART_SetConfig+0x27e>
 8002750:	2304      	movs	r3, #4
 8002752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002756:	e0ce      	b.n	80028f6 <UART_SetConfig+0x27e>
 8002758:	2308      	movs	r3, #8
 800275a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800275e:	e0ca      	b.n	80028f6 <UART_SetConfig+0x27e>
 8002760:	2310      	movs	r3, #16
 8002762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002766:	e0c6      	b.n	80028f6 <UART_SetConfig+0x27e>
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a7d      	ldr	r2, [pc, #500]	; (8002964 <UART_SetConfig+0x2ec>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d138      	bne.n	80027e4 <UART_SetConfig+0x16c>
 8002772:	4b7b      	ldr	r3, [pc, #492]	; (8002960 <UART_SetConfig+0x2e8>)
 8002774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b0c      	cmp	r3, #12
 800277e:	d82d      	bhi.n	80027dc <UART_SetConfig+0x164>
 8002780:	a201      	add	r2, pc, #4	; (adr r2, 8002788 <UART_SetConfig+0x110>)
 8002782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002786:	bf00      	nop
 8002788:	080027bd 	.word	0x080027bd
 800278c:	080027dd 	.word	0x080027dd
 8002790:	080027dd 	.word	0x080027dd
 8002794:	080027dd 	.word	0x080027dd
 8002798:	080027cd 	.word	0x080027cd
 800279c:	080027dd 	.word	0x080027dd
 80027a0:	080027dd 	.word	0x080027dd
 80027a4:	080027dd 	.word	0x080027dd
 80027a8:	080027c5 	.word	0x080027c5
 80027ac:	080027dd 	.word	0x080027dd
 80027b0:	080027dd 	.word	0x080027dd
 80027b4:	080027dd 	.word	0x080027dd
 80027b8:	080027d5 	.word	0x080027d5
 80027bc:	2300      	movs	r3, #0
 80027be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027c2:	e098      	b.n	80028f6 <UART_SetConfig+0x27e>
 80027c4:	2302      	movs	r3, #2
 80027c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027ca:	e094      	b.n	80028f6 <UART_SetConfig+0x27e>
 80027cc:	2304      	movs	r3, #4
 80027ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027d2:	e090      	b.n	80028f6 <UART_SetConfig+0x27e>
 80027d4:	2308      	movs	r3, #8
 80027d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027da:	e08c      	b.n	80028f6 <UART_SetConfig+0x27e>
 80027dc:	2310      	movs	r3, #16
 80027de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027e2:	e088      	b.n	80028f6 <UART_SetConfig+0x27e>
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a5f      	ldr	r2, [pc, #380]	; (8002968 <UART_SetConfig+0x2f0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d125      	bne.n	800283a <UART_SetConfig+0x1c2>
 80027ee:	4b5c      	ldr	r3, [pc, #368]	; (8002960 <UART_SetConfig+0x2e8>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80027f8:	2b30      	cmp	r3, #48	; 0x30
 80027fa:	d016      	beq.n	800282a <UART_SetConfig+0x1b2>
 80027fc:	2b30      	cmp	r3, #48	; 0x30
 80027fe:	d818      	bhi.n	8002832 <UART_SetConfig+0x1ba>
 8002800:	2b20      	cmp	r3, #32
 8002802:	d00a      	beq.n	800281a <UART_SetConfig+0x1a2>
 8002804:	2b20      	cmp	r3, #32
 8002806:	d814      	bhi.n	8002832 <UART_SetConfig+0x1ba>
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <UART_SetConfig+0x19a>
 800280c:	2b10      	cmp	r3, #16
 800280e:	d008      	beq.n	8002822 <UART_SetConfig+0x1aa>
 8002810:	e00f      	b.n	8002832 <UART_SetConfig+0x1ba>
 8002812:	2300      	movs	r3, #0
 8002814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002818:	e06d      	b.n	80028f6 <UART_SetConfig+0x27e>
 800281a:	2302      	movs	r3, #2
 800281c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002820:	e069      	b.n	80028f6 <UART_SetConfig+0x27e>
 8002822:	2304      	movs	r3, #4
 8002824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002828:	e065      	b.n	80028f6 <UART_SetConfig+0x27e>
 800282a:	2308      	movs	r3, #8
 800282c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002830:	e061      	b.n	80028f6 <UART_SetConfig+0x27e>
 8002832:	2310      	movs	r3, #16
 8002834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002838:	e05d      	b.n	80028f6 <UART_SetConfig+0x27e>
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a4b      	ldr	r2, [pc, #300]	; (800296c <UART_SetConfig+0x2f4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d125      	bne.n	8002890 <UART_SetConfig+0x218>
 8002844:	4b46      	ldr	r3, [pc, #280]	; (8002960 <UART_SetConfig+0x2e8>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800284e:	2bc0      	cmp	r3, #192	; 0xc0
 8002850:	d016      	beq.n	8002880 <UART_SetConfig+0x208>
 8002852:	2bc0      	cmp	r3, #192	; 0xc0
 8002854:	d818      	bhi.n	8002888 <UART_SetConfig+0x210>
 8002856:	2b80      	cmp	r3, #128	; 0x80
 8002858:	d00a      	beq.n	8002870 <UART_SetConfig+0x1f8>
 800285a:	2b80      	cmp	r3, #128	; 0x80
 800285c:	d814      	bhi.n	8002888 <UART_SetConfig+0x210>
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <UART_SetConfig+0x1f0>
 8002862:	2b40      	cmp	r3, #64	; 0x40
 8002864:	d008      	beq.n	8002878 <UART_SetConfig+0x200>
 8002866:	e00f      	b.n	8002888 <UART_SetConfig+0x210>
 8002868:	2300      	movs	r3, #0
 800286a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800286e:	e042      	b.n	80028f6 <UART_SetConfig+0x27e>
 8002870:	2302      	movs	r3, #2
 8002872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002876:	e03e      	b.n	80028f6 <UART_SetConfig+0x27e>
 8002878:	2304      	movs	r3, #4
 800287a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800287e:	e03a      	b.n	80028f6 <UART_SetConfig+0x27e>
 8002880:	2308      	movs	r3, #8
 8002882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002886:	e036      	b.n	80028f6 <UART_SetConfig+0x27e>
 8002888:	2310      	movs	r3, #16
 800288a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800288e:	e032      	b.n	80028f6 <UART_SetConfig+0x27e>
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a30      	ldr	r2, [pc, #192]	; (8002958 <UART_SetConfig+0x2e0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d12a      	bne.n	80028f0 <UART_SetConfig+0x278>
 800289a:	4b31      	ldr	r3, [pc, #196]	; (8002960 <UART_SetConfig+0x2e8>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028a8:	d01a      	beq.n	80028e0 <UART_SetConfig+0x268>
 80028aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028ae:	d81b      	bhi.n	80028e8 <UART_SetConfig+0x270>
 80028b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028b4:	d00c      	beq.n	80028d0 <UART_SetConfig+0x258>
 80028b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ba:	d815      	bhi.n	80028e8 <UART_SetConfig+0x270>
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <UART_SetConfig+0x250>
 80028c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c4:	d008      	beq.n	80028d8 <UART_SetConfig+0x260>
 80028c6:	e00f      	b.n	80028e8 <UART_SetConfig+0x270>
 80028c8:	2300      	movs	r3, #0
 80028ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028ce:	e012      	b.n	80028f6 <UART_SetConfig+0x27e>
 80028d0:	2302      	movs	r3, #2
 80028d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028d6:	e00e      	b.n	80028f6 <UART_SetConfig+0x27e>
 80028d8:	2304      	movs	r3, #4
 80028da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028de:	e00a      	b.n	80028f6 <UART_SetConfig+0x27e>
 80028e0:	2308      	movs	r3, #8
 80028e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028e6:	e006      	b.n	80028f6 <UART_SetConfig+0x27e>
 80028e8:	2310      	movs	r3, #16
 80028ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028ee:	e002      	b.n	80028f6 <UART_SetConfig+0x27e>
 80028f0:	2310      	movs	r3, #16
 80028f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a17      	ldr	r2, [pc, #92]	; (8002958 <UART_SetConfig+0x2e0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	f040 80a8 	bne.w	8002a52 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002902:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002906:	2b08      	cmp	r3, #8
 8002908:	d834      	bhi.n	8002974 <UART_SetConfig+0x2fc>
 800290a:	a201      	add	r2, pc, #4	; (adr r2, 8002910 <UART_SetConfig+0x298>)
 800290c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002910:	08002935 	.word	0x08002935
 8002914:	08002975 	.word	0x08002975
 8002918:	0800293d 	.word	0x0800293d
 800291c:	08002975 	.word	0x08002975
 8002920:	08002943 	.word	0x08002943
 8002924:	08002975 	.word	0x08002975
 8002928:	08002975 	.word	0x08002975
 800292c:	08002975 	.word	0x08002975
 8002930:	0800294b 	.word	0x0800294b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002934:	f7ff f872 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 8002938:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800293a:	e021      	b.n	8002980 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <UART_SetConfig+0x2f8>)
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002940:	e01e      	b.n	8002980 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002942:	f7fe fffd 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 8002946:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002948:	e01a      	b.n	8002980 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800294a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002950:	e016      	b.n	8002980 <UART_SetConfig+0x308>
 8002952:	bf00      	nop
 8002954:	cfff69f3 	.word	0xcfff69f3
 8002958:	40008000 	.word	0x40008000
 800295c:	40013800 	.word	0x40013800
 8002960:	40021000 	.word	0x40021000
 8002964:	40004400 	.word	0x40004400
 8002968:	40004800 	.word	0x40004800
 800296c:	40004c00 	.word	0x40004c00
 8002970:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800297e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 812a 	beq.w	8002bdc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	4a9e      	ldr	r2, [pc, #632]	; (8002c08 <UART_SetConfig+0x590>)
 800298e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002992:	461a      	mov	r2, r3
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	fbb3 f3f2 	udiv	r3, r3, r2
 800299a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4413      	add	r3, r2
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d305      	bcc.n	80029b8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d903      	bls.n	80029c0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80029be:	e10d      	b.n	8002bdc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	2200      	movs	r2, #0
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	60fa      	str	r2, [r7, #12]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	4a8e      	ldr	r2, [pc, #568]	; (8002c08 <UART_SetConfig+0x590>)
 80029ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2200      	movs	r2, #0
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029e2:	f7fd fc1d 	bl	8000220 <__aeabi_uldivmod>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4610      	mov	r0, r2
 80029ec:	4619      	mov	r1, r3
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	020b      	lsls	r3, r1, #8
 80029f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80029fc:	0202      	lsls	r2, r0, #8
 80029fe:	6979      	ldr	r1, [r7, #20]
 8002a00:	6849      	ldr	r1, [r1, #4]
 8002a02:	0849      	lsrs	r1, r1, #1
 8002a04:	2000      	movs	r0, #0
 8002a06:	460c      	mov	r4, r1
 8002a08:	4605      	mov	r5, r0
 8002a0a:	eb12 0804 	adds.w	r8, r2, r4
 8002a0e:	eb43 0905 	adc.w	r9, r3, r5
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	469a      	mov	sl, r3
 8002a1a:	4693      	mov	fp, r2
 8002a1c:	4652      	mov	r2, sl
 8002a1e:	465b      	mov	r3, fp
 8002a20:	4640      	mov	r0, r8
 8002a22:	4649      	mov	r1, r9
 8002a24:	f7fd fbfc 	bl	8000220 <__aeabi_uldivmod>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a36:	d308      	bcc.n	8002a4a <UART_SetConfig+0x3d2>
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a3e:	d204      	bcs.n	8002a4a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6a3a      	ldr	r2, [r7, #32]
 8002a46:	60da      	str	r2, [r3, #12]
 8002a48:	e0c8      	b.n	8002bdc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002a50:	e0c4      	b.n	8002bdc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a5a:	d167      	bne.n	8002b2c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002a5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d828      	bhi.n	8002ab6 <UART_SetConfig+0x43e>
 8002a64:	a201      	add	r2, pc, #4	; (adr r2, 8002a6c <UART_SetConfig+0x3f4>)
 8002a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6a:	bf00      	nop
 8002a6c:	08002a91 	.word	0x08002a91
 8002a70:	08002a99 	.word	0x08002a99
 8002a74:	08002aa1 	.word	0x08002aa1
 8002a78:	08002ab7 	.word	0x08002ab7
 8002a7c:	08002aa7 	.word	0x08002aa7
 8002a80:	08002ab7 	.word	0x08002ab7
 8002a84:	08002ab7 	.word	0x08002ab7
 8002a88:	08002ab7 	.word	0x08002ab7
 8002a8c:	08002aaf 	.word	0x08002aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a90:	f7fe ffc4 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 8002a94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a96:	e014      	b.n	8002ac2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a98:	f7fe ffd6 	bl	8001a48 <HAL_RCC_GetPCLK2Freq>
 8002a9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a9e:	e010      	b.n	8002ac2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002aa0:	4b5a      	ldr	r3, [pc, #360]	; (8002c0c <UART_SetConfig+0x594>)
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002aa4:	e00d      	b.n	8002ac2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aa6:	f7fe ff4b 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 8002aaa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002aac:	e009      	b.n	8002ac2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ab4:	e005      	b.n	8002ac2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002ac0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 8089 	beq.w	8002bdc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	4a4e      	ldr	r2, [pc, #312]	; (8002c08 <UART_SetConfig+0x590>)
 8002ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002adc:	005a      	lsls	r2, r3, #1
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	085b      	lsrs	r3, r3, #1
 8002ae4:	441a      	add	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	2b0f      	cmp	r3, #15
 8002af4:	d916      	bls.n	8002b24 <UART_SetConfig+0x4ac>
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afc:	d212      	bcs.n	8002b24 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	f023 030f 	bic.w	r3, r3, #15
 8002b06:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	085b      	lsrs	r3, r3, #1
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	8bfb      	ldrh	r3, [r7, #30]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	8bfa      	ldrh	r2, [r7, #30]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	e05b      	b.n	8002bdc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002b2a:	e057      	b.n	8002bdc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d828      	bhi.n	8002b86 <UART_SetConfig+0x50e>
 8002b34:	a201      	add	r2, pc, #4	; (adr r2, 8002b3c <UART_SetConfig+0x4c4>)
 8002b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3a:	bf00      	nop
 8002b3c:	08002b61 	.word	0x08002b61
 8002b40:	08002b69 	.word	0x08002b69
 8002b44:	08002b71 	.word	0x08002b71
 8002b48:	08002b87 	.word	0x08002b87
 8002b4c:	08002b77 	.word	0x08002b77
 8002b50:	08002b87 	.word	0x08002b87
 8002b54:	08002b87 	.word	0x08002b87
 8002b58:	08002b87 	.word	0x08002b87
 8002b5c:	08002b7f 	.word	0x08002b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b60:	f7fe ff5c 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 8002b64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002b66:	e014      	b.n	8002b92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b68:	f7fe ff6e 	bl	8001a48 <HAL_RCC_GetPCLK2Freq>
 8002b6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002b6e:	e010      	b.n	8002b92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b70:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <UART_SetConfig+0x594>)
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002b74:	e00d      	b.n	8002b92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b76:	f7fe fee3 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 8002b7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002b7c:	e009      	b.n	8002b92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002b84:	e005      	b.n	8002b92 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002b90:	bf00      	nop
    }

    if (pclk != 0U)
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d021      	beq.n	8002bdc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	4a1a      	ldr	r2, [pc, #104]	; (8002c08 <UART_SetConfig+0x590>)
 8002b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	fbb3 f2f2 	udiv	r2, r3, r2
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	085b      	lsrs	r3, r3, #1
 8002bb0:	441a      	add	r2, r3
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	2b0f      	cmp	r3, #15
 8002bc0:	d909      	bls.n	8002bd6 <UART_SetConfig+0x55e>
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d205      	bcs.n	8002bd6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	60da      	str	r2, [r3, #12]
 8002bd4:	e002      	b.n	8002bdc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002bf8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3730      	adds	r7, #48	; 0x30
 8002c00:	46bd      	mov	sp, r7
 8002c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c06:	bf00      	nop
 8002c08:	08005f70 	.word	0x08005f70
 8002c0c:	00f42400 	.word	0x00f42400

08002c10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01a      	beq.n	8002d26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d0e:	d10a      	bne.n	8002d26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	605a      	str	r2, [r3, #4]
  }
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d64:	f7fd fe6e 	bl	8000a44 <HAL_GetTick>
 8002d68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d10e      	bne.n	8002d96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f82f 	bl	8002dea <UART_WaitOnFlagUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e025      	b.n	8002de2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d10e      	bne.n	8002dc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002da4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f819 	bl	8002dea <UART_WaitOnFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e00f      	b.n	8002de2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b09c      	sub	sp, #112	; 0x70
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	603b      	str	r3, [r7, #0]
 8002df6:	4613      	mov	r3, r2
 8002df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfa:	e0a9      	b.n	8002f50 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e02:	f000 80a5 	beq.w	8002f50 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e06:	f7fd fe1d 	bl	8000a44 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d302      	bcc.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x32>
 8002e16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d140      	bne.n	8002e9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e24:	e853 3f00 	ldrex	r3, [r3]
 8002e28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e30:	667b      	str	r3, [r7, #100]	; 0x64
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e3c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002e40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e42:	e841 2300 	strex	r3, r2, [r1]
 8002e46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1e6      	bne.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3308      	adds	r3, #8
 8002e54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e58:	e853 3f00 	ldrex	r3, [r3]
 8002e5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	663b      	str	r3, [r7, #96]	; 0x60
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	3308      	adds	r3, #8
 8002e6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002e70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e76:	e841 2300 	strex	r3, r2, [r1]
 8002e7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1e5      	bne.n	8002e4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e069      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d051      	beq.n	8002f50 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eba:	d149      	bne.n	8002f50 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ec4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ece:	e853 3f00 	ldrex	r3, [r3]
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002eda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eec:	e841 2300 	strex	r3, r2, [r1]
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1e6      	bne.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3308      	adds	r3, #8
 8002efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	e853 3f00 	ldrex	r3, [r3]
 8002f06:	613b      	str	r3, [r7, #16]
   return(result);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f023 0301 	bic.w	r3, r3, #1
 8002f0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3308      	adds	r3, #8
 8002f16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f18:	623a      	str	r2, [r7, #32]
 8002f1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1c:	69f9      	ldr	r1, [r7, #28]
 8002f1e:	6a3a      	ldr	r2, [r7, #32]
 8002f20:	e841 2300 	strex	r3, r2, [r1]
 8002f24:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e5      	bne.n	8002ef8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e010      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69da      	ldr	r2, [r3, #28]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	f43f af46 	beq.w	8002dfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3770      	adds	r7, #112	; 0x70
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b085      	sub	sp, #20
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_UARTEx_DisableFifoMode+0x16>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e027      	b.n	8002fe0 <HAL_UARTEx_DisableFifoMode+0x66>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2224      	movs	r2, #36	; 0x24
 8002f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0201 	bic.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002fbe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003000:	2302      	movs	r3, #2
 8003002:	e02d      	b.n	8003060 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2224      	movs	r2, #36	; 0x24
 8003010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f84f 	bl	80030e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800307c:	2302      	movs	r3, #2
 800307e:	e02d      	b.n	80030dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2224      	movs	r2, #36	; 0x24
 800308c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0201 	bic.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f811 	bl	80030e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d108      	bne.n	8003106 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003104:	e031      	b.n	800316a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003106:	2308      	movs	r3, #8
 8003108:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800310a:	2308      	movs	r3, #8
 800310c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	0e5b      	lsrs	r3, r3, #25
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	0f5b      	lsrs	r3, r3, #29
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800312e:	7bbb      	ldrb	r3, [r7, #14]
 8003130:	7b3a      	ldrb	r2, [r7, #12]
 8003132:	4911      	ldr	r1, [pc, #68]	; (8003178 <UARTEx_SetNbDataToProcess+0x94>)
 8003134:	5c8a      	ldrb	r2, [r1, r2]
 8003136:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800313a:	7b3a      	ldrb	r2, [r7, #12]
 800313c:	490f      	ldr	r1, [pc, #60]	; (800317c <UARTEx_SetNbDataToProcess+0x98>)
 800313e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003140:	fb93 f3f2 	sdiv	r3, r3, r2
 8003144:	b29a      	uxth	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	7b7a      	ldrb	r2, [r7, #13]
 8003150:	4909      	ldr	r1, [pc, #36]	; (8003178 <UARTEx_SetNbDataToProcess+0x94>)
 8003152:	5c8a      	ldrb	r2, [r1, r2]
 8003154:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003158:	7b7a      	ldrb	r2, [r7, #13]
 800315a:	4908      	ldr	r1, [pc, #32]	; (800317c <UARTEx_SetNbDataToProcess+0x98>)
 800315c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800315e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003162:	b29a      	uxth	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	08005f88 	.word	0x08005f88
 800317c:	08005f90 	.word	0x08005f90

08003180 <__NVIC_SetPriority>:
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	6039      	str	r1, [r7, #0]
 800318a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003190:	2b00      	cmp	r3, #0
 8003192:	db0a      	blt.n	80031aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	b2da      	uxtb	r2, r3
 8003198:	490c      	ldr	r1, [pc, #48]	; (80031cc <__NVIC_SetPriority+0x4c>)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	0112      	lsls	r2, r2, #4
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	440b      	add	r3, r1
 80031a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031a8:	e00a      	b.n	80031c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4908      	ldr	r1, [pc, #32]	; (80031d0 <__NVIC_SetPriority+0x50>)
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	3b04      	subs	r3, #4
 80031b8:	0112      	lsls	r2, r2, #4
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	440b      	add	r3, r1
 80031be:	761a      	strb	r2, [r3, #24]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000e100 	.word	0xe000e100
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <SysTick_Handler+0x1c>)
 80031da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80031dc:	f001 fd28 	bl	8004c30 <xTaskGetSchedulerState>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d001      	beq.n	80031ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80031e6:	f002 fb0f 	bl	8005808 <xPortSysTickHandler>
  }
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	e000e010 	.word	0xe000e010

080031f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80031f8:	2100      	movs	r1, #0
 80031fa:	f06f 0004 	mvn.w	r0, #4
 80031fe:	f7ff ffbf 	bl	8003180 <__NVIC_SetPriority>
#endif
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800320e:	f3ef 8305 	mrs	r3, IPSR
 8003212:	603b      	str	r3, [r7, #0]
  return(result);
 8003214:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800321a:	f06f 0305 	mvn.w	r3, #5
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	e00c      	b.n	800323c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <osKernelInitialize+0x44>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d105      	bne.n	8003236 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800322a:	4b08      	ldr	r3, [pc, #32]	; (800324c <osKernelInitialize+0x44>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003230:	2300      	movs	r3, #0
 8003232:	607b      	str	r3, [r7, #4]
 8003234:	e002      	b.n	800323c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003236:	f04f 33ff 	mov.w	r3, #4294967295
 800323a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800323c:	687b      	ldr	r3, [r7, #4]
}
 800323e:	4618      	mov	r0, r3
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000174 	.word	0x20000174

08003250 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003256:	f3ef 8305 	mrs	r3, IPSR
 800325a:	603b      	str	r3, [r7, #0]
  return(result);
 800325c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003262:	f06f 0305 	mvn.w	r3, #5
 8003266:	607b      	str	r3, [r7, #4]
 8003268:	e010      	b.n	800328c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800326a:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <osKernelStart+0x48>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d109      	bne.n	8003286 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003272:	f7ff ffbf 	bl	80031f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003276:	4b08      	ldr	r3, [pc, #32]	; (8003298 <osKernelStart+0x48>)
 8003278:	2202      	movs	r2, #2
 800327a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800327c:	f001 f87c 	bl	8004378 <vTaskStartScheduler>
      stat = osOK;
 8003280:	2300      	movs	r3, #0
 8003282:	607b      	str	r3, [r7, #4]
 8003284:	e002      	b.n	800328c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003286:	f04f 33ff 	mov.w	r3, #4294967295
 800328a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800328c:	687b      	ldr	r3, [r7, #4]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000174 	.word	0x20000174

0800329c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800329c:	b580      	push	{r7, lr}
 800329e:	b08e      	sub	sp, #56	; 0x38
 80032a0:	af04      	add	r7, sp, #16
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032ac:	f3ef 8305 	mrs	r3, IPSR
 80032b0:	617b      	str	r3, [r7, #20]
  return(result);
 80032b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d17e      	bne.n	80033b6 <osThreadNew+0x11a>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d07b      	beq.n	80033b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80032be:	2380      	movs	r3, #128	; 0x80
 80032c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80032c2:	2318      	movs	r3, #24
 80032c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80032ca:	f04f 33ff 	mov.w	r3, #4294967295
 80032ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d045      	beq.n	8003362 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <osThreadNew+0x48>
        name = attr->name;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <osThreadNew+0x6e>
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	2b38      	cmp	r3, #56	; 0x38
 80032fc:	d805      	bhi.n	800330a <osThreadNew+0x6e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <osThreadNew+0x72>
        return (NULL);
 800330a:	2300      	movs	r3, #0
 800330c:	e054      	b.n	80033b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	089b      	lsrs	r3, r3, #2
 800331c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00e      	beq.n	8003344 <osThreadNew+0xa8>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2bbb      	cmp	r3, #187	; 0xbb
 800332c:	d90a      	bls.n	8003344 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <osThreadNew+0xa8>
        mem = 1;
 800333e:	2301      	movs	r3, #1
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	e010      	b.n	8003366 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10c      	bne.n	8003366 <osThreadNew+0xca>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d108      	bne.n	8003366 <osThreadNew+0xca>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d104      	bne.n	8003366 <osThreadNew+0xca>
          mem = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	61bb      	str	r3, [r7, #24]
 8003360:	e001      	b.n	8003366 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d110      	bne.n	800338e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003374:	9202      	str	r2, [sp, #8]
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	6a3a      	ldr	r2, [r7, #32]
 8003380:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 fe0c 	bl	8003fa0 <xTaskCreateStatic>
 8003388:	4603      	mov	r3, r0
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	e013      	b.n	80033b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d110      	bne.n	80033b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	b29a      	uxth	r2, r3
 8003398:	f107 0310 	add.w	r3, r7, #16
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fe57 	bl	800405a <xTaskCreate>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d001      	beq.n	80033b6 <osThreadNew+0x11a>
            hTask = NULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80033b6:	693b      	ldr	r3, [r7, #16]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3728      	adds	r7, #40	; 0x28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033c8:	f3ef 8305 	mrs	r3, IPSR
 80033cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80033ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <osDelay+0x1c>
    stat = osErrorISR;
 80033d4:	f06f 0305 	mvn.w	r3, #5
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	e007      	b.n	80033ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 ff92 	bl	8004310 <vTaskDelay>
    }
  }

  return (stat);
 80033ec:	68fb      	ldr	r3, [r7, #12]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4a07      	ldr	r2, [pc, #28]	; (8003424 <vApplicationGetIdleTaskMemory+0x2c>)
 8003408:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4a06      	ldr	r2, [pc, #24]	; (8003428 <vApplicationGetIdleTaskMemory+0x30>)
 800340e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2280      	movs	r2, #128	; 0x80
 8003414:	601a      	str	r2, [r3, #0]
}
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	20000178 	.word	0x20000178
 8003428:	20000234 	.word	0x20000234

0800342c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4a07      	ldr	r2, [pc, #28]	; (8003458 <vApplicationGetTimerTaskMemory+0x2c>)
 800343c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	4a06      	ldr	r2, [pc, #24]	; (800345c <vApplicationGetTimerTaskMemory+0x30>)
 8003442:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800344a:	601a      	str	r2, [r3, #0]
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	20000434 	.word	0x20000434
 800345c:	200004f0 	.word	0x200004f0

08003460 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f103 0208 	add.w	r2, r3, #8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f04f 32ff 	mov.w	r2, #4294967295
 8003478:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f103 0208 	add.w	r2, r3, #8
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f103 0208 	add.w	r2, r3, #8
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034ba:	b480      	push	{r7}
 80034bc:	b085      	sub	sp, #20
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	601a      	str	r2, [r3, #0]
}
 80034f6:	bf00      	nop
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003502:	b480      	push	{r7}
 8003504:	b085      	sub	sp, #20
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d103      	bne.n	8003522 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	e00c      	b.n	800353c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3308      	adds	r3, #8
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	e002      	b.n	8003530 <vListInsert+0x2e>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	429a      	cmp	r2, r3
 800353a:	d2f6      	bcs.n	800352a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	601a      	str	r2, [r3, #0]
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6892      	ldr	r2, [r2, #8]
 800358a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6852      	ldr	r2, [r2, #4]
 8003594:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	429a      	cmp	r2, r3
 800359e:	d103      	bne.n	80035a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	1e5a      	subs	r2, r3, #1
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10a      	bne.n	80035f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035ee:	bf00      	nop
 80035f0:	e7fe      	b.n	80035f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80035f2:	f002 f877 	bl	80056e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	68f9      	ldr	r1, [r7, #12]
 8003600:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	441a      	add	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003622:	3b01      	subs	r3, #1
 8003624:	68f9      	ldr	r1, [r7, #12]
 8003626:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	441a      	add	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	22ff      	movs	r2, #255	; 0xff
 8003636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	22ff      	movs	r2, #255	; 0xff
 800363e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d114      	bne.n	8003672 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01a      	beq.n	8003686 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	3310      	adds	r3, #16
 8003654:	4618      	mov	r0, r3
 8003656:	f001 f929 	bl	80048ac <xTaskRemoveFromEventList>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d012      	beq.n	8003686 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <xQueueGenericReset+0xcc>)
 8003662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	e009      	b.n	8003686 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	3310      	adds	r3, #16
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fef2 	bl	8003460 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3324      	adds	r3, #36	; 0x24
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff feed 	bl	8003460 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003686:	f002 f85d 	bl	8005744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800368a:	2301      	movs	r3, #1
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	e000ed04 	.word	0xe000ed04

08003698 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08e      	sub	sp, #56	; 0x38
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10a      	bne.n	80036c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80036be:	bf00      	nop
 80036c0:	e7fe      	b.n	80036c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10a      	bne.n	80036de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80036c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036cc:	f383 8811 	msr	BASEPRI, r3
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80036da:	bf00      	nop
 80036dc:	e7fe      	b.n	80036dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <xQueueGenericCreateStatic+0x52>
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <xQueueGenericCreateStatic+0x56>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <xQueueGenericCreateStatic+0x58>
 80036ee:	2300      	movs	r3, #0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	623b      	str	r3, [r7, #32]
}
 8003706:	bf00      	nop
 8003708:	e7fe      	b.n	8003708 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <xQueueGenericCreateStatic+0x7e>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <xQueueGenericCreateStatic+0x82>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <xQueueGenericCreateStatic+0x84>
 800371a:	2300      	movs	r3, #0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	61fb      	str	r3, [r7, #28]
}
 8003732:	bf00      	nop
 8003734:	e7fe      	b.n	8003734 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003736:	2350      	movs	r3, #80	; 0x50
 8003738:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2b50      	cmp	r3, #80	; 0x50
 800373e:	d00a      	beq.n	8003756 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	61bb      	str	r3, [r7, #24]
}
 8003752:	bf00      	nop
 8003754:	e7fe      	b.n	8003754 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003756:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00d      	beq.n	800377e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800376a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	4613      	mov	r3, r2
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f805 	bl	8003788 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003780:	4618      	mov	r0, r3
 8003782:	3730      	adds	r7, #48	; 0x30
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d103      	bne.n	80037a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	e002      	b.n	80037aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037b6:	2101      	movs	r1, #1
 80037b8:	69b8      	ldr	r0, [r7, #24]
 80037ba:	f7ff ff05 	bl	80035c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037c6:	bf00      	nop
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08e      	sub	sp, #56	; 0x38
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037de:	2300      	movs	r3, #0
 80037e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <xQueueGenericSend+0x32>
	__asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037fe:	bf00      	nop
 8003800:	e7fe      	b.n	8003800 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d103      	bne.n	8003810 <xQueueGenericSend+0x40>
 8003808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <xQueueGenericSend+0x44>
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <xQueueGenericSend+0x46>
 8003814:	2300      	movs	r3, #0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <xQueueGenericSend+0x60>
	__asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800382c:	bf00      	nop
 800382e:	e7fe      	b.n	800382e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d103      	bne.n	800383e <xQueueGenericSend+0x6e>
 8003836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <xQueueGenericSend+0x72>
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <xQueueGenericSend+0x74>
 8003842:	2300      	movs	r3, #0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10a      	bne.n	800385e <xQueueGenericSend+0x8e>
	__asm volatile
 8003848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	623b      	str	r3, [r7, #32]
}
 800385a:	bf00      	nop
 800385c:	e7fe      	b.n	800385c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800385e:	f001 f9e7 	bl	8004c30 <xTaskGetSchedulerState>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d102      	bne.n	800386e <xQueueGenericSend+0x9e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <xQueueGenericSend+0xa2>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <xQueueGenericSend+0xa4>
 8003872:	2300      	movs	r3, #0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10a      	bne.n	800388e <xQueueGenericSend+0xbe>
	__asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	61fb      	str	r3, [r7, #28]
}
 800388a:	bf00      	nop
 800388c:	e7fe      	b.n	800388c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800388e:	f001 ff29 	bl	80056e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389a:	429a      	cmp	r2, r3
 800389c:	d302      	bcc.n	80038a4 <xQueueGenericSend+0xd4>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d129      	bne.n	80038f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038aa:	f000 fa0b 	bl	8003cc4 <prvCopyDataToQueue>
 80038ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d010      	beq.n	80038da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	3324      	adds	r3, #36	; 0x24
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fff5 	bl	80048ac <xTaskRemoveFromEventList>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d013      	beq.n	80038f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038c8:	4b3f      	ldr	r3, [pc, #252]	; (80039c8 <xQueueGenericSend+0x1f8>)
 80038ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	e00a      	b.n	80038f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d007      	beq.n	80038f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038e0:	4b39      	ldr	r3, [pc, #228]	; (80039c8 <xQueueGenericSend+0x1f8>)
 80038e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038f0:	f001 ff28 	bl	8005744 <vPortExitCritical>
				return pdPASS;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e063      	b.n	80039c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d103      	bne.n	8003906 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038fe:	f001 ff21 	bl	8005744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003902:	2300      	movs	r3, #0
 8003904:	e05c      	b.n	80039c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003908:	2b00      	cmp	r3, #0
 800390a:	d106      	bne.n	800391a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	4618      	mov	r0, r3
 8003912:	f001 f82f 	bl	8004974 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003916:	2301      	movs	r3, #1
 8003918:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800391a:	f001 ff13 	bl	8005744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800391e:	f000 fd9b 	bl	8004458 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003922:	f001 fedf 	bl	80056e4 <vPortEnterCritical>
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800392c:	b25b      	sxtb	r3, r3
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003932:	d103      	bne.n	800393c <xQueueGenericSend+0x16c>
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800393c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003942:	b25b      	sxtb	r3, r3
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003948:	d103      	bne.n	8003952 <xQueueGenericSend+0x182>
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003952:	f001 fef7 	bl	8005744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003956:	1d3a      	adds	r2, r7, #4
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	4611      	mov	r1, r2
 800395e:	4618      	mov	r0, r3
 8003960:	f001 f81e 	bl	80049a0 <xTaskCheckForTimeOut>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d124      	bne.n	80039b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800396a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800396c:	f000 faa2 	bl	8003eb4 <prvIsQueueFull>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d018      	beq.n	80039a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	3310      	adds	r3, #16
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	4611      	mov	r1, r2
 800397e:	4618      	mov	r0, r3
 8003980:	f000 ff44 	bl	800480c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003986:	f000 fa2d 	bl	8003de4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800398a:	f000 fd73 	bl	8004474 <xTaskResumeAll>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	f47f af7c 	bne.w	800388e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003996:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <xQueueGenericSend+0x1f8>)
 8003998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	e772      	b.n	800388e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80039a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039aa:	f000 fa1b 	bl	8003de4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039ae:	f000 fd61 	bl	8004474 <xTaskResumeAll>
 80039b2:	e76c      	b.n	800388e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80039b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039b6:	f000 fa15 	bl	8003de4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039ba:	f000 fd5b 	bl	8004474 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3738      	adds	r7, #56	; 0x38
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	e000ed04 	.word	0xe000ed04

080039cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b090      	sub	sp, #64	; 0x40
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80039de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10a      	bne.n	80039fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d103      	bne.n	8003a08 <xQueueGenericSendFromISR+0x3c>
 8003a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <xQueueGenericSendFromISR+0x40>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <xQueueGenericSendFromISR+0x42>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a24:	bf00      	nop
 8003a26:	e7fe      	b.n	8003a26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d103      	bne.n	8003a36 <xQueueGenericSendFromISR+0x6a>
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <xQueueGenericSendFromISR+0x6e>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <xQueueGenericSendFromISR+0x70>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10a      	bne.n	8003a56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	623b      	str	r3, [r7, #32]
}
 8003a52:	bf00      	nop
 8003a54:	e7fe      	b.n	8003a54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a56:	f001 ff27 	bl	80058a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a5a:	f3ef 8211 	mrs	r2, BASEPRI
 8003a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	61fa      	str	r2, [r7, #28]
 8003a70:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d302      	bcc.n	8003a88 <xQueueGenericSendFromISR+0xbc>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d12f      	bne.n	8003ae8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a9e:	f000 f911 	bl	8003cc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003aa2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aaa:	d112      	bne.n	8003ad2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d016      	beq.n	8003ae2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab6:	3324      	adds	r3, #36	; 0x24
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fef7 	bl	80048ac <xTaskRemoveFromEventList>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00e      	beq.n	8003ae2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00b      	beq.n	8003ae2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e007      	b.n	8003ae2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ad2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	b25a      	sxtb	r2, r3
 8003adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003ae6:	e001      	b.n	8003aec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003af6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3740      	adds	r7, #64	; 0x40
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08c      	sub	sp, #48	; 0x30
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b10:	2300      	movs	r3, #0
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10a      	bne.n	8003b34 <xQueueReceive+0x30>
	__asm volatile
 8003b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b22:	f383 8811 	msr	BASEPRI, r3
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	623b      	str	r3, [r7, #32]
}
 8003b30:	bf00      	nop
 8003b32:	e7fe      	b.n	8003b32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <xQueueReceive+0x3e>
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <xQueueReceive+0x42>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <xQueueReceive+0x44>
 8003b46:	2300      	movs	r3, #0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10a      	bne.n	8003b62 <xQueueReceive+0x5e>
	__asm volatile
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	61fb      	str	r3, [r7, #28]
}
 8003b5e:	bf00      	nop
 8003b60:	e7fe      	b.n	8003b60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b62:	f001 f865 	bl	8004c30 <xTaskGetSchedulerState>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d102      	bne.n	8003b72 <xQueueReceive+0x6e>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <xQueueReceive+0x72>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <xQueueReceive+0x74>
 8003b76:	2300      	movs	r3, #0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <xQueueReceive+0x8e>
	__asm volatile
 8003b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	61bb      	str	r3, [r7, #24]
}
 8003b8e:	bf00      	nop
 8003b90:	e7fe      	b.n	8003b90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b92:	f001 fda7 	bl	80056e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d01f      	beq.n	8003be2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ba6:	f000 f8f7 	bl	8003d98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	1e5a      	subs	r2, r3, #1
 8003bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00f      	beq.n	8003bda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbc:	3310      	adds	r3, #16
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fe74 	bl	80048ac <xTaskRemoveFromEventList>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003bca:	4b3d      	ldr	r3, [pc, #244]	; (8003cc0 <xQueueReceive+0x1bc>)
 8003bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003bda:	f001 fdb3 	bl	8005744 <vPortExitCritical>
				return pdPASS;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e069      	b.n	8003cb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d103      	bne.n	8003bf0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003be8:	f001 fdac 	bl	8005744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bec:	2300      	movs	r3, #0
 8003bee:	e062      	b.n	8003cb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bf6:	f107 0310 	add.w	r3, r7, #16
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 feba 	bl	8004974 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c00:	2301      	movs	r3, #1
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c04:	f001 fd9e 	bl	8005744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c08:	f000 fc26 	bl	8004458 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c0c:	f001 fd6a 	bl	80056e4 <vPortEnterCritical>
 8003c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c16:	b25b      	sxtb	r3, r3
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1c:	d103      	bne.n	8003c26 <xQueueReceive+0x122>
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c2c:	b25b      	sxtb	r3, r3
 8003c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c32:	d103      	bne.n	8003c3c <xQueueReceive+0x138>
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c3c:	f001 fd82 	bl	8005744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c40:	1d3a      	adds	r2, r7, #4
 8003c42:	f107 0310 	add.w	r3, r7, #16
 8003c46:	4611      	mov	r1, r2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fea9 	bl	80049a0 <xTaskCheckForTimeOut>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d123      	bne.n	8003c9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c56:	f000 f917 	bl	8003e88 <prvIsQueueEmpty>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d017      	beq.n	8003c90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	3324      	adds	r3, #36	; 0x24
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4611      	mov	r1, r2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 fdcf 	bl	800480c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c70:	f000 f8b8 	bl	8003de4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c74:	f000 fbfe 	bl	8004474 <xTaskResumeAll>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d189      	bne.n	8003b92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003c7e:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <xQueueReceive+0x1bc>)
 8003c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	e780      	b.n	8003b92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c92:	f000 f8a7 	bl	8003de4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c96:	f000 fbed 	bl	8004474 <xTaskResumeAll>
 8003c9a:	e77a      	b.n	8003b92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c9e:	f000 f8a1 	bl	8003de4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ca2:	f000 fbe7 	bl	8004474 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ca8:	f000 f8ee 	bl	8003e88 <prvIsQueueEmpty>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f43f af6f 	beq.w	8003b92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003cb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3730      	adds	r7, #48	; 0x30
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	e000ed04 	.word	0xe000ed04

08003cc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10d      	bne.n	8003cfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d14d      	bne.n	8003d86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 ffbc 	bl	8004c6c <xTaskPriorityDisinherit>
 8003cf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	e043      	b.n	8003d86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d119      	bne.n	8003d38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6858      	ldr	r0, [r3, #4]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68b9      	ldr	r1, [r7, #8]
 8003d10:	f002 f81a 	bl	8005d48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	441a      	add	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d32b      	bcc.n	8003d86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	e026      	b.n	8003d86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	68d8      	ldr	r0, [r3, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	461a      	mov	r2, r3
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	f002 f800 	bl	8005d48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	425b      	negs	r3, r3
 8003d52:	441a      	add	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d207      	bcs.n	8003d74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	425b      	negs	r3, r3
 8003d6e:	441a      	add	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d105      	bne.n	8003d86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d8e:	697b      	ldr	r3, [r7, #20]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d018      	beq.n	8003ddc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	441a      	add	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d303      	bcc.n	8003dcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68d9      	ldr	r1, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	6838      	ldr	r0, [r7, #0]
 8003dd8:	f001 ffb6 	bl	8005d48 <memcpy>
	}
}
 8003ddc:	bf00      	nop
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003dec:	f001 fc7a 	bl	80056e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003df6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003df8:	e011      	b.n	8003e1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d012      	beq.n	8003e28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3324      	adds	r3, #36	; 0x24
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fd50 	bl	80048ac <xTaskRemoveFromEventList>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e12:	f000 fe27 	bl	8004a64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	dce9      	bgt.n	8003dfa <prvUnlockQueue+0x16>
 8003e26:	e000      	b.n	8003e2a <prvUnlockQueue+0x46>
					break;
 8003e28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	22ff      	movs	r2, #255	; 0xff
 8003e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e32:	f001 fc87 	bl	8005744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e36:	f001 fc55 	bl	80056e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e42:	e011      	b.n	8003e68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d012      	beq.n	8003e72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3310      	adds	r3, #16
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fd2b 	bl	80048ac <xTaskRemoveFromEventList>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e5c:	f000 fe02 	bl	8004a64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e60:	7bbb      	ldrb	r3, [r7, #14]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	dce9      	bgt.n	8003e44 <prvUnlockQueue+0x60>
 8003e70:	e000      	b.n	8003e74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	22ff      	movs	r2, #255	; 0xff
 8003e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e7c:	f001 fc62 	bl	8005744 <vPortExitCritical>
}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e90:	f001 fc28 	bl	80056e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	e001      	b.n	8003ea6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ea6:	f001 fc4d 	bl	8005744 <vPortExitCritical>

	return xReturn;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ebc:	f001 fc12 	bl	80056e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d102      	bne.n	8003ed2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	e001      	b.n	8003ed6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ed6:	f001 fc35 	bl	8005744 <vPortExitCritical>

	return xReturn;
 8003eda:	68fb      	ldr	r3, [r7, #12]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	e014      	b.n	8003f1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ef4:	4a0f      	ldr	r2, [pc, #60]	; (8003f34 <vQueueAddToRegistry+0x50>)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10b      	bne.n	8003f18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f00:	490c      	ldr	r1, [pc, #48]	; (8003f34 <vQueueAddToRegistry+0x50>)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f0a:	4a0a      	ldr	r2, [pc, #40]	; (8003f34 <vQueueAddToRegistry+0x50>)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4413      	add	r3, r2
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f16:	e006      	b.n	8003f26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b07      	cmp	r3, #7
 8003f22:	d9e7      	bls.n	8003ef4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	200008f0 	.word	0x200008f0

08003f38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003f48:	f001 fbcc 	bl	80056e4 <vPortEnterCritical>
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f52:	b25b      	sxtb	r3, r3
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f58:	d103      	bne.n	8003f62 <vQueueWaitForMessageRestricted+0x2a>
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f68:	b25b      	sxtb	r3, r3
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6e:	d103      	bne.n	8003f78 <vQueueWaitForMessageRestricted+0x40>
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f78:	f001 fbe4 	bl	8005744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d106      	bne.n	8003f92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	3324      	adds	r3, #36	; 0x24
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fc61 	bl	8004854 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003f92:	6978      	ldr	r0, [r7, #20]
 8003f94:	f7ff ff26 	bl	8003de4 <prvUnlockQueue>
	}
 8003f98:	bf00      	nop
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08e      	sub	sp, #56	; 0x38
 8003fa4:	af04      	add	r7, sp, #16
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <xTaskCreateStatic+0x2a>
	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	623b      	str	r3, [r7, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	e7fe      	b.n	8003fc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10a      	bne.n	8003fe6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	61fb      	str	r3, [r7, #28]
}
 8003fe2:	bf00      	nop
 8003fe4:	e7fe      	b.n	8003fe4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fe6:	23bc      	movs	r3, #188	; 0xbc
 8003fe8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2bbc      	cmp	r3, #188	; 0xbc
 8003fee:	d00a      	beq.n	8004006 <xTaskCreateStatic+0x66>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	61bb      	str	r3, [r7, #24]
}
 8004002:	bf00      	nop
 8004004:	e7fe      	b.n	8004004 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004006:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400a:	2b00      	cmp	r3, #0
 800400c:	d01e      	beq.n	800404c <xTaskCreateStatic+0xac>
 800400e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01b      	beq.n	800404c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800401c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	2202      	movs	r2, #2
 8004022:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004026:	2300      	movs	r3, #0
 8004028:	9303      	str	r3, [sp, #12]
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	9302      	str	r3, [sp, #8]
 800402e:	f107 0314 	add.w	r3, r7, #20
 8004032:	9301      	str	r3, [sp, #4]
 8004034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	68b9      	ldr	r1, [r7, #8]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f850 	bl	80040e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004044:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004046:	f000 f8f3 	bl	8004230 <prvAddNewTaskToReadyList>
 800404a:	e001      	b.n	8004050 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004050:	697b      	ldr	r3, [r7, #20]
	}
 8004052:	4618      	mov	r0, r3
 8004054:	3728      	adds	r7, #40	; 0x28
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800405a:	b580      	push	{r7, lr}
 800405c:	b08c      	sub	sp, #48	; 0x30
 800405e:	af04      	add	r7, sp, #16
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800406a:	88fb      	ldrh	r3, [r7, #6]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4618      	mov	r0, r3
 8004070:	f001 fc5a 	bl	8005928 <pvPortMalloc>
 8004074:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00e      	beq.n	800409a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800407c:	20bc      	movs	r0, #188	; 0xbc
 800407e:	f001 fc53 	bl	8005928 <pvPortMalloc>
 8004082:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
 8004090:	e005      	b.n	800409e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004092:	6978      	ldr	r0, [r7, #20]
 8004094:	f001 fd14 	bl	8005ac0 <vPortFree>
 8004098:	e001      	b.n	800409e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d017      	beq.n	80040d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040ac:	88fa      	ldrh	r2, [r7, #6]
 80040ae:	2300      	movs	r3, #0
 80040b0:	9303      	str	r3, [sp, #12]
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	9302      	str	r3, [sp, #8]
 80040b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f80e 	bl	80040e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040c8:	69f8      	ldr	r0, [r7, #28]
 80040ca:	f000 f8b1 	bl	8004230 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040ce:	2301      	movs	r3, #1
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	e002      	b.n	80040da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040d4:	f04f 33ff 	mov.w	r3, #4294967295
 80040d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040da:	69bb      	ldr	r3, [r7, #24]
	}
 80040dc:	4618      	mov	r0, r3
 80040de:	3720      	adds	r7, #32
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	461a      	mov	r2, r3
 80040fc:	21a5      	movs	r1, #165	; 0xa5
 80040fe:	f001 fe31 	bl	8005d64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800410c:	3b01      	subs	r3, #1
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	f023 0307 	bic.w	r3, r3, #7
 800411a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	617b      	str	r3, [r7, #20]
}
 8004138:	bf00      	nop
 800413a:	e7fe      	b.n	800413a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d01f      	beq.n	8004182 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	e012      	b.n	800416e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	7819      	ldrb	r1, [r3, #0]
 8004150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	4413      	add	r3, r2
 8004156:	3334      	adds	r3, #52	; 0x34
 8004158:	460a      	mov	r2, r1
 800415a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	4413      	add	r3, r2
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d006      	beq.n	8004176 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	3301      	adds	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	2b0f      	cmp	r3, #15
 8004172:	d9e9      	bls.n	8004148 <prvInitialiseNewTask+0x64>
 8004174:	e000      	b.n	8004178 <prvInitialiseNewTask+0x94>
			{
				break;
 8004176:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004180:	e003      	b.n	800418a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	2b37      	cmp	r3, #55	; 0x37
 800418e:	d901      	bls.n	8004194 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004190:	2337      	movs	r3, #55	; 0x37
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004198:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800419e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80041a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a2:	2200      	movs	r2, #0
 80041a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	3304      	adds	r3, #4
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff f978 	bl	80034a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	3318      	adds	r3, #24
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff f973 	bl	80034a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	3354      	adds	r3, #84	; 0x54
 80041e4:	2260      	movs	r2, #96	; 0x60
 80041e6:	2100      	movs	r1, #0
 80041e8:	4618      	mov	r0, r3
 80041ea:	f001 fdbb 	bl	8005d64 <memset>
 80041ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f0:	4a0c      	ldr	r2, [pc, #48]	; (8004224 <prvInitialiseNewTask+0x140>)
 80041f2:	659a      	str	r2, [r3, #88]	; 0x58
 80041f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f6:	4a0c      	ldr	r2, [pc, #48]	; (8004228 <prvInitialiseNewTask+0x144>)
 80041f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	4a0b      	ldr	r2, [pc, #44]	; (800422c <prvInitialiseNewTask+0x148>)
 80041fe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	68f9      	ldr	r1, [r7, #12]
 8004204:	69b8      	ldr	r0, [r7, #24]
 8004206:	f001 f941 	bl	800548c <pxPortInitialiseStack>
 800420a:	4602      	mov	r2, r0
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800421a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800421c:	bf00      	nop
 800421e:	3720      	adds	r7, #32
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	08005fb8 	.word	0x08005fb8
 8004228:	08005fd8 	.word	0x08005fd8
 800422c:	08005f98 	.word	0x08005f98

08004230 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004238:	f001 fa54 	bl	80056e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800423c:	4b2d      	ldr	r3, [pc, #180]	; (80042f4 <prvAddNewTaskToReadyList+0xc4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3301      	adds	r3, #1
 8004242:	4a2c      	ldr	r2, [pc, #176]	; (80042f4 <prvAddNewTaskToReadyList+0xc4>)
 8004244:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004246:	4b2c      	ldr	r3, [pc, #176]	; (80042f8 <prvAddNewTaskToReadyList+0xc8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d109      	bne.n	8004262 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800424e:	4a2a      	ldr	r2, [pc, #168]	; (80042f8 <prvAddNewTaskToReadyList+0xc8>)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004254:	4b27      	ldr	r3, [pc, #156]	; (80042f4 <prvAddNewTaskToReadyList+0xc4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d110      	bne.n	800427e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800425c:	f000 fc26 	bl	8004aac <prvInitialiseTaskLists>
 8004260:	e00d      	b.n	800427e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004262:	4b26      	ldr	r3, [pc, #152]	; (80042fc <prvAddNewTaskToReadyList+0xcc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d109      	bne.n	800427e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800426a:	4b23      	ldr	r3, [pc, #140]	; (80042f8 <prvAddNewTaskToReadyList+0xc8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	429a      	cmp	r2, r3
 8004276:	d802      	bhi.n	800427e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004278:	4a1f      	ldr	r2, [pc, #124]	; (80042f8 <prvAddNewTaskToReadyList+0xc8>)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800427e:	4b20      	ldr	r3, [pc, #128]	; (8004300 <prvAddNewTaskToReadyList+0xd0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3301      	adds	r3, #1
 8004284:	4a1e      	ldr	r2, [pc, #120]	; (8004300 <prvAddNewTaskToReadyList+0xd0>)
 8004286:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004288:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <prvAddNewTaskToReadyList+0xd0>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004294:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <prvAddNewTaskToReadyList+0xd4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d903      	bls.n	80042a4 <prvAddNewTaskToReadyList+0x74>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	4a18      	ldr	r2, [pc, #96]	; (8004304 <prvAddNewTaskToReadyList+0xd4>)
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <prvAddNewTaskToReadyList+0xd8>)
 80042b2:	441a      	add	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4619      	mov	r1, r3
 80042ba:	4610      	mov	r0, r2
 80042bc:	f7ff f8fd 	bl	80034ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80042c0:	f001 fa40 	bl	8005744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80042c4:	4b0d      	ldr	r3, [pc, #52]	; (80042fc <prvAddNewTaskToReadyList+0xcc>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00e      	beq.n	80042ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042cc:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <prvAddNewTaskToReadyList+0xc8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d207      	bcs.n	80042ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042da:	4b0c      	ldr	r3, [pc, #48]	; (800430c <prvAddNewTaskToReadyList+0xdc>)
 80042dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20000e04 	.word	0x20000e04
 80042f8:	20000930 	.word	0x20000930
 80042fc:	20000e10 	.word	0x20000e10
 8004300:	20000e20 	.word	0x20000e20
 8004304:	20000e0c 	.word	0x20000e0c
 8004308:	20000934 	.word	0x20000934
 800430c:	e000ed04 	.word	0xe000ed04

08004310 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d017      	beq.n	8004352 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004322:	4b13      	ldr	r3, [pc, #76]	; (8004370 <vTaskDelay+0x60>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <vTaskDelay+0x30>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	60bb      	str	r3, [r7, #8]
}
 800433c:	bf00      	nop
 800433e:	e7fe      	b.n	800433e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004340:	f000 f88a 	bl	8004458 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004344:	2100      	movs	r1, #0
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fcfe 	bl	8004d48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800434c:	f000 f892 	bl	8004474 <xTaskResumeAll>
 8004350:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d107      	bne.n	8004368 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004358:	4b06      	ldr	r3, [pc, #24]	; (8004374 <vTaskDelay+0x64>)
 800435a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004368:	bf00      	nop
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20000e2c 	.word	0x20000e2c
 8004374:	e000ed04 	.word	0xe000ed04

08004378 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08a      	sub	sp, #40	; 0x28
 800437c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004386:	463a      	mov	r2, r7
 8004388:	1d39      	adds	r1, r7, #4
 800438a:	f107 0308 	add.w	r3, r7, #8
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff f832 	bl	80033f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004394:	6839      	ldr	r1, [r7, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	9202      	str	r2, [sp, #8]
 800439c:	9301      	str	r3, [sp, #4]
 800439e:	2300      	movs	r3, #0
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	2300      	movs	r3, #0
 80043a4:	460a      	mov	r2, r1
 80043a6:	4924      	ldr	r1, [pc, #144]	; (8004438 <vTaskStartScheduler+0xc0>)
 80043a8:	4824      	ldr	r0, [pc, #144]	; (800443c <vTaskStartScheduler+0xc4>)
 80043aa:	f7ff fdf9 	bl	8003fa0 <xTaskCreateStatic>
 80043ae:	4603      	mov	r3, r0
 80043b0:	4a23      	ldr	r2, [pc, #140]	; (8004440 <vTaskStartScheduler+0xc8>)
 80043b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80043b4:	4b22      	ldr	r3, [pc, #136]	; (8004440 <vTaskStartScheduler+0xc8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80043bc:	2301      	movs	r3, #1
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	e001      	b.n	80043c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d102      	bne.n	80043d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80043cc:	f000 fd10 	bl	8004df0 <xTimerCreateTimerTask>
 80043d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d11b      	bne.n	8004410 <vTaskStartScheduler+0x98>
	__asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	613b      	str	r3, [r7, #16]
}
 80043ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043ec:	4b15      	ldr	r3, [pc, #84]	; (8004444 <vTaskStartScheduler+0xcc>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3354      	adds	r3, #84	; 0x54
 80043f2:	4a15      	ldr	r2, [pc, #84]	; (8004448 <vTaskStartScheduler+0xd0>)
 80043f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043f6:	4b15      	ldr	r3, [pc, #84]	; (800444c <vTaskStartScheduler+0xd4>)
 80043f8:	f04f 32ff 	mov.w	r2, #4294967295
 80043fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043fe:	4b14      	ldr	r3, [pc, #80]	; (8004450 <vTaskStartScheduler+0xd8>)
 8004400:	2201      	movs	r2, #1
 8004402:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004404:	4b13      	ldr	r3, [pc, #76]	; (8004454 <vTaskStartScheduler+0xdc>)
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800440a:	f001 f8c9 	bl	80055a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800440e:	e00e      	b.n	800442e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004416:	d10a      	bne.n	800442e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	60fb      	str	r3, [r7, #12]
}
 800442a:	bf00      	nop
 800442c:	e7fe      	b.n	800442c <vTaskStartScheduler+0xb4>
}
 800442e:	bf00      	nop
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	08005f1c 	.word	0x08005f1c
 800443c:	08004a7d 	.word	0x08004a7d
 8004440:	20000e28 	.word	0x20000e28
 8004444:	20000930 	.word	0x20000930
 8004448:	20000010 	.word	0x20000010
 800444c:	20000e24 	.word	0x20000e24
 8004450:	20000e10 	.word	0x20000e10
 8004454:	20000e08 	.word	0x20000e08

08004458 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800445c:	4b04      	ldr	r3, [pc, #16]	; (8004470 <vTaskSuspendAll+0x18>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3301      	adds	r3, #1
 8004462:	4a03      	ldr	r2, [pc, #12]	; (8004470 <vTaskSuspendAll+0x18>)
 8004464:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004466:	bf00      	nop
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	20000e2c 	.word	0x20000e2c

08004474 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800447e:	2300      	movs	r3, #0
 8004480:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004482:	4b42      	ldr	r3, [pc, #264]	; (800458c <xTaskResumeAll+0x118>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10a      	bne.n	80044a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	603b      	str	r3, [r7, #0]
}
 800449c:	bf00      	nop
 800449e:	e7fe      	b.n	800449e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044a0:	f001 f920 	bl	80056e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044a4:	4b39      	ldr	r3, [pc, #228]	; (800458c <xTaskResumeAll+0x118>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	4a38      	ldr	r2, [pc, #224]	; (800458c <xTaskResumeAll+0x118>)
 80044ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ae:	4b37      	ldr	r3, [pc, #220]	; (800458c <xTaskResumeAll+0x118>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d162      	bne.n	800457c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044b6:	4b36      	ldr	r3, [pc, #216]	; (8004590 <xTaskResumeAll+0x11c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d05e      	beq.n	800457c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044be:	e02f      	b.n	8004520 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044c0:	4b34      	ldr	r3, [pc, #208]	; (8004594 <xTaskResumeAll+0x120>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	3318      	adds	r3, #24
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff f851 	bl	8003574 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3304      	adds	r3, #4
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff f84c 	bl	8003574 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e0:	4b2d      	ldr	r3, [pc, #180]	; (8004598 <xTaskResumeAll+0x124>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d903      	bls.n	80044f0 <xTaskResumeAll+0x7c>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	4a2a      	ldr	r2, [pc, #168]	; (8004598 <xTaskResumeAll+0x124>)
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4a27      	ldr	r2, [pc, #156]	; (800459c <xTaskResumeAll+0x128>)
 80044fe:	441a      	add	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3304      	adds	r3, #4
 8004504:	4619      	mov	r1, r3
 8004506:	4610      	mov	r0, r2
 8004508:	f7fe ffd7 	bl	80034ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004510:	4b23      	ldr	r3, [pc, #140]	; (80045a0 <xTaskResumeAll+0x12c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	429a      	cmp	r2, r3
 8004518:	d302      	bcc.n	8004520 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800451a:	4b22      	ldr	r3, [pc, #136]	; (80045a4 <xTaskResumeAll+0x130>)
 800451c:	2201      	movs	r2, #1
 800451e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004520:	4b1c      	ldr	r3, [pc, #112]	; (8004594 <xTaskResumeAll+0x120>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1cb      	bne.n	80044c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800452e:	f000 fb5f 	bl	8004bf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004532:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <xTaskResumeAll+0x134>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d010      	beq.n	8004560 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800453e:	f000 f847 	bl	80045d0 <xTaskIncrementTick>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004548:	4b16      	ldr	r3, [pc, #88]	; (80045a4 <xTaskResumeAll+0x130>)
 800454a:	2201      	movs	r2, #1
 800454c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3b01      	subs	r3, #1
 8004552:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f1      	bne.n	800453e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800455a:	4b13      	ldr	r3, [pc, #76]	; (80045a8 <xTaskResumeAll+0x134>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004560:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <xTaskResumeAll+0x130>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d009      	beq.n	800457c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004568:	2301      	movs	r3, #1
 800456a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800456c:	4b0f      	ldr	r3, [pc, #60]	; (80045ac <xTaskResumeAll+0x138>)
 800456e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800457c:	f001 f8e2 	bl	8005744 <vPortExitCritical>

	return xAlreadyYielded;
 8004580:	68bb      	ldr	r3, [r7, #8]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000e2c 	.word	0x20000e2c
 8004590:	20000e04 	.word	0x20000e04
 8004594:	20000dc4 	.word	0x20000dc4
 8004598:	20000e0c 	.word	0x20000e0c
 800459c:	20000934 	.word	0x20000934
 80045a0:	20000930 	.word	0x20000930
 80045a4:	20000e18 	.word	0x20000e18
 80045a8:	20000e14 	.word	0x20000e14
 80045ac:	e000ed04 	.word	0xe000ed04

080045b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80045b6:	4b05      	ldr	r3, [pc, #20]	; (80045cc <xTaskGetTickCount+0x1c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80045bc:	687b      	ldr	r3, [r7, #4]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	20000e08 	.word	0x20000e08

080045d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045da:	4b4f      	ldr	r3, [pc, #316]	; (8004718 <xTaskIncrementTick+0x148>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f040 808f 	bne.w	8004702 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045e4:	4b4d      	ldr	r3, [pc, #308]	; (800471c <xTaskIncrementTick+0x14c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3301      	adds	r3, #1
 80045ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80045ec:	4a4b      	ldr	r2, [pc, #300]	; (800471c <xTaskIncrementTick+0x14c>)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d120      	bne.n	800463a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80045f8:	4b49      	ldr	r3, [pc, #292]	; (8004720 <xTaskIncrementTick+0x150>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <xTaskIncrementTick+0x48>
	__asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	603b      	str	r3, [r7, #0]
}
 8004614:	bf00      	nop
 8004616:	e7fe      	b.n	8004616 <xTaskIncrementTick+0x46>
 8004618:	4b41      	ldr	r3, [pc, #260]	; (8004720 <xTaskIncrementTick+0x150>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	4b41      	ldr	r3, [pc, #260]	; (8004724 <xTaskIncrementTick+0x154>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a3f      	ldr	r2, [pc, #252]	; (8004720 <xTaskIncrementTick+0x150>)
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	4a3f      	ldr	r2, [pc, #252]	; (8004724 <xTaskIncrementTick+0x154>)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	4b3e      	ldr	r3, [pc, #248]	; (8004728 <xTaskIncrementTick+0x158>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3301      	adds	r3, #1
 8004632:	4a3d      	ldr	r2, [pc, #244]	; (8004728 <xTaskIncrementTick+0x158>)
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	f000 fadb 	bl	8004bf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800463a:	4b3c      	ldr	r3, [pc, #240]	; (800472c <xTaskIncrementTick+0x15c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	429a      	cmp	r2, r3
 8004642:	d349      	bcc.n	80046d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004644:	4b36      	ldr	r3, [pc, #216]	; (8004720 <xTaskIncrementTick+0x150>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d104      	bne.n	8004658 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800464e:	4b37      	ldr	r3, [pc, #220]	; (800472c <xTaskIncrementTick+0x15c>)
 8004650:	f04f 32ff 	mov.w	r2, #4294967295
 8004654:	601a      	str	r2, [r3, #0]
					break;
 8004656:	e03f      	b.n	80046d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004658:	4b31      	ldr	r3, [pc, #196]	; (8004720 <xTaskIncrementTick+0x150>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	429a      	cmp	r2, r3
 800466e:	d203      	bcs.n	8004678 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004670:	4a2e      	ldr	r2, [pc, #184]	; (800472c <xTaskIncrementTick+0x15c>)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004676:	e02f      	b.n	80046d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	3304      	adds	r3, #4
 800467c:	4618      	mov	r0, r3
 800467e:	f7fe ff79 	bl	8003574 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	2b00      	cmp	r3, #0
 8004688:	d004      	beq.n	8004694 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	3318      	adds	r3, #24
 800468e:	4618      	mov	r0, r3
 8004690:	f7fe ff70 	bl	8003574 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004698:	4b25      	ldr	r3, [pc, #148]	; (8004730 <xTaskIncrementTick+0x160>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d903      	bls.n	80046a8 <xTaskIncrementTick+0xd8>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	4a22      	ldr	r2, [pc, #136]	; (8004730 <xTaskIncrementTick+0x160>)
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4a1f      	ldr	r2, [pc, #124]	; (8004734 <xTaskIncrementTick+0x164>)
 80046b6:	441a      	add	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4619      	mov	r1, r3
 80046be:	4610      	mov	r0, r2
 80046c0:	f7fe fefb 	bl	80034ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c8:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <xTaskIncrementTick+0x168>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d3b8      	bcc.n	8004644 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80046d2:	2301      	movs	r3, #1
 80046d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046d6:	e7b5      	b.n	8004644 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046d8:	4b17      	ldr	r3, [pc, #92]	; (8004738 <xTaskIncrementTick+0x168>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046de:	4915      	ldr	r1, [pc, #84]	; (8004734 <xTaskIncrementTick+0x164>)
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d901      	bls.n	80046f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80046f0:	2301      	movs	r3, #1
 80046f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80046f4:	4b11      	ldr	r3, [pc, #68]	; (800473c <xTaskIncrementTick+0x16c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d007      	beq.n	800470c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80046fc:	2301      	movs	r3, #1
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	e004      	b.n	800470c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004702:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <xTaskIncrementTick+0x170>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3301      	adds	r3, #1
 8004708:	4a0d      	ldr	r2, [pc, #52]	; (8004740 <xTaskIncrementTick+0x170>)
 800470a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800470c:	697b      	ldr	r3, [r7, #20]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000e2c 	.word	0x20000e2c
 800471c:	20000e08 	.word	0x20000e08
 8004720:	20000dbc 	.word	0x20000dbc
 8004724:	20000dc0 	.word	0x20000dc0
 8004728:	20000e1c 	.word	0x20000e1c
 800472c:	20000e24 	.word	0x20000e24
 8004730:	20000e0c 	.word	0x20000e0c
 8004734:	20000934 	.word	0x20000934
 8004738:	20000930 	.word	0x20000930
 800473c:	20000e18 	.word	0x20000e18
 8004740:	20000e14 	.word	0x20000e14

08004744 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800474a:	4b2a      	ldr	r3, [pc, #168]	; (80047f4 <vTaskSwitchContext+0xb0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004752:	4b29      	ldr	r3, [pc, #164]	; (80047f8 <vTaskSwitchContext+0xb4>)
 8004754:	2201      	movs	r2, #1
 8004756:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004758:	e046      	b.n	80047e8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800475a:	4b27      	ldr	r3, [pc, #156]	; (80047f8 <vTaskSwitchContext+0xb4>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004760:	4b26      	ldr	r3, [pc, #152]	; (80047fc <vTaskSwitchContext+0xb8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	e010      	b.n	800478a <vTaskSwitchContext+0x46>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10a      	bne.n	8004784 <vTaskSwitchContext+0x40>
	__asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	607b      	str	r3, [r7, #4]
}
 8004780:	bf00      	nop
 8004782:	e7fe      	b.n	8004782 <vTaskSwitchContext+0x3e>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	3b01      	subs	r3, #1
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	491d      	ldr	r1, [pc, #116]	; (8004800 <vTaskSwitchContext+0xbc>)
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0e4      	beq.n	8004768 <vTaskSwitchContext+0x24>
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4a15      	ldr	r2, [pc, #84]	; (8004800 <vTaskSwitchContext+0xbc>)
 80047aa:	4413      	add	r3, r2
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	605a      	str	r2, [r3, #4]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	3308      	adds	r3, #8
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d104      	bne.n	80047ce <vTaskSwitchContext+0x8a>
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	605a      	str	r2, [r3, #4]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4a0b      	ldr	r2, [pc, #44]	; (8004804 <vTaskSwitchContext+0xc0>)
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	4a08      	ldr	r2, [pc, #32]	; (80047fc <vTaskSwitchContext+0xb8>)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047de:	4b09      	ldr	r3, [pc, #36]	; (8004804 <vTaskSwitchContext+0xc0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3354      	adds	r3, #84	; 0x54
 80047e4:	4a08      	ldr	r2, [pc, #32]	; (8004808 <vTaskSwitchContext+0xc4>)
 80047e6:	6013      	str	r3, [r2, #0]
}
 80047e8:	bf00      	nop
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	20000e2c 	.word	0x20000e2c
 80047f8:	20000e18 	.word	0x20000e18
 80047fc:	20000e0c 	.word	0x20000e0c
 8004800:	20000934 	.word	0x20000934
 8004804:	20000930 	.word	0x20000930
 8004808:	20000010 	.word	0x20000010

0800480c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10a      	bne.n	8004832 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	60fb      	str	r3, [r7, #12]
}
 800482e:	bf00      	nop
 8004830:	e7fe      	b.n	8004830 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004832:	4b07      	ldr	r3, [pc, #28]	; (8004850 <vTaskPlaceOnEventList+0x44>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3318      	adds	r3, #24
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fe fe61 	bl	8003502 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004840:	2101      	movs	r1, #1
 8004842:	6838      	ldr	r0, [r7, #0]
 8004844:	f000 fa80 	bl	8004d48 <prvAddCurrentTaskToDelayedList>
}
 8004848:	bf00      	nop
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20000930 	.word	0x20000930

08004854 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10a      	bne.n	800487c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	617b      	str	r3, [r7, #20]
}
 8004878:	bf00      	nop
 800487a:	e7fe      	b.n	800487a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800487c:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3318      	adds	r3, #24
 8004882:	4619      	mov	r1, r3
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f7fe fe18 	bl	80034ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004890:	f04f 33ff 	mov.w	r3, #4294967295
 8004894:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	68b8      	ldr	r0, [r7, #8]
 800489a:	f000 fa55 	bl	8004d48 <prvAddCurrentTaskToDelayedList>
	}
 800489e:	bf00      	nop
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000930 	.word	0x20000930

080048ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	60fb      	str	r3, [r7, #12]
}
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	3318      	adds	r3, #24
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fe fe49 	bl	8003574 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048e2:	4b1e      	ldr	r3, [pc, #120]	; (800495c <xTaskRemoveFromEventList+0xb0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d11d      	bne.n	8004926 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	3304      	adds	r3, #4
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fe fe40 	bl	8003574 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f8:	4b19      	ldr	r3, [pc, #100]	; (8004960 <xTaskRemoveFromEventList+0xb4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d903      	bls.n	8004908 <xTaskRemoveFromEventList+0x5c>
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	4a16      	ldr	r2, [pc, #88]	; (8004960 <xTaskRemoveFromEventList+0xb4>)
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490c:	4613      	mov	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4a13      	ldr	r2, [pc, #76]	; (8004964 <xTaskRemoveFromEventList+0xb8>)
 8004916:	441a      	add	r2, r3
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	3304      	adds	r3, #4
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f7fe fdcb 	bl	80034ba <vListInsertEnd>
 8004924:	e005      	b.n	8004932 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	3318      	adds	r3, #24
 800492a:	4619      	mov	r1, r3
 800492c:	480e      	ldr	r0, [pc, #56]	; (8004968 <xTaskRemoveFromEventList+0xbc>)
 800492e:	f7fe fdc4 	bl	80034ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004936:	4b0d      	ldr	r3, [pc, #52]	; (800496c <xTaskRemoveFromEventList+0xc0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	429a      	cmp	r2, r3
 800493e:	d905      	bls.n	800494c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004940:	2301      	movs	r3, #1
 8004942:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004944:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <xTaskRemoveFromEventList+0xc4>)
 8004946:	2201      	movs	r2, #1
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	e001      	b.n	8004950 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004950:	697b      	ldr	r3, [r7, #20]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	20000e2c 	.word	0x20000e2c
 8004960:	20000e0c 	.word	0x20000e0c
 8004964:	20000934 	.word	0x20000934
 8004968:	20000dc4 	.word	0x20000dc4
 800496c:	20000930 	.word	0x20000930
 8004970:	20000e18 	.word	0x20000e18

08004974 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800497c:	4b06      	ldr	r3, [pc, #24]	; (8004998 <vTaskInternalSetTimeOutState+0x24>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <vTaskInternalSetTimeOutState+0x28>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	605a      	str	r2, [r3, #4]
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	20000e1c 	.word	0x20000e1c
 800499c:	20000e08 	.word	0x20000e08

080049a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	613b      	str	r3, [r7, #16]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	60fb      	str	r3, [r7, #12]
}
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80049e2:	f000 fe7f 	bl	80056e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049e6:	4b1d      	ldr	r3, [pc, #116]	; (8004a5c <xTaskCheckForTimeOut+0xbc>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fe:	d102      	bne.n	8004a06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a00:	2300      	movs	r3, #0
 8004a02:	61fb      	str	r3, [r7, #28]
 8004a04:	e023      	b.n	8004a4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <xTaskCheckForTimeOut+0xc0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d007      	beq.n	8004a22 <xTaskCheckForTimeOut+0x82>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d302      	bcc.n	8004a22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	61fb      	str	r3, [r7, #28]
 8004a20:	e015      	b.n	8004a4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d20b      	bcs.n	8004a44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	1ad2      	subs	r2, r2, r3
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff ff9b 	bl	8004974 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61fb      	str	r3, [r7, #28]
 8004a42:	e004      	b.n	8004a4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a4e:	f000 fe79 	bl	8005744 <vPortExitCritical>

	return xReturn;
 8004a52:	69fb      	ldr	r3, [r7, #28]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3720      	adds	r7, #32
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20000e08 	.word	0x20000e08
 8004a60:	20000e1c 	.word	0x20000e1c

08004a64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a68:	4b03      	ldr	r3, [pc, #12]	; (8004a78 <vTaskMissedYield+0x14>)
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]
}
 8004a6e:	bf00      	nop
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	20000e18 	.word	0x20000e18

08004a7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a84:	f000 f852 	bl	8004b2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a88:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <prvIdleTask+0x28>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d9f9      	bls.n	8004a84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <prvIdleTask+0x2c>)
 8004a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004aa0:	e7f0      	b.n	8004a84 <prvIdleTask+0x8>
 8004aa2:	bf00      	nop
 8004aa4:	20000934 	.word	0x20000934
 8004aa8:	e000ed04 	.word	0xe000ed04

08004aac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	607b      	str	r3, [r7, #4]
 8004ab6:	e00c      	b.n	8004ad2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4a12      	ldr	r2, [pc, #72]	; (8004b0c <prvInitialiseTaskLists+0x60>)
 8004ac4:	4413      	add	r3, r2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fe fcca 	bl	8003460 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	607b      	str	r3, [r7, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b37      	cmp	r3, #55	; 0x37
 8004ad6:	d9ef      	bls.n	8004ab8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ad8:	480d      	ldr	r0, [pc, #52]	; (8004b10 <prvInitialiseTaskLists+0x64>)
 8004ada:	f7fe fcc1 	bl	8003460 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ade:	480d      	ldr	r0, [pc, #52]	; (8004b14 <prvInitialiseTaskLists+0x68>)
 8004ae0:	f7fe fcbe 	bl	8003460 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ae4:	480c      	ldr	r0, [pc, #48]	; (8004b18 <prvInitialiseTaskLists+0x6c>)
 8004ae6:	f7fe fcbb 	bl	8003460 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004aea:	480c      	ldr	r0, [pc, #48]	; (8004b1c <prvInitialiseTaskLists+0x70>)
 8004aec:	f7fe fcb8 	bl	8003460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004af0:	480b      	ldr	r0, [pc, #44]	; (8004b20 <prvInitialiseTaskLists+0x74>)
 8004af2:	f7fe fcb5 	bl	8003460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004af6:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <prvInitialiseTaskLists+0x78>)
 8004af8:	4a05      	ldr	r2, [pc, #20]	; (8004b10 <prvInitialiseTaskLists+0x64>)
 8004afa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004afc:	4b0a      	ldr	r3, [pc, #40]	; (8004b28 <prvInitialiseTaskLists+0x7c>)
 8004afe:	4a05      	ldr	r2, [pc, #20]	; (8004b14 <prvInitialiseTaskLists+0x68>)
 8004b00:	601a      	str	r2, [r3, #0]
}
 8004b02:	bf00      	nop
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20000934 	.word	0x20000934
 8004b10:	20000d94 	.word	0x20000d94
 8004b14:	20000da8 	.word	0x20000da8
 8004b18:	20000dc4 	.word	0x20000dc4
 8004b1c:	20000dd8 	.word	0x20000dd8
 8004b20:	20000df0 	.word	0x20000df0
 8004b24:	20000dbc 	.word	0x20000dbc
 8004b28:	20000dc0 	.word	0x20000dc0

08004b2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b32:	e019      	b.n	8004b68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b34:	f000 fdd6 	bl	80056e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b38:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <prvCheckTasksWaitingTermination+0x50>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3304      	adds	r3, #4
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fe fd15 	bl	8003574 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <prvCheckTasksWaitingTermination+0x54>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	4a0b      	ldr	r2, [pc, #44]	; (8004b80 <prvCheckTasksWaitingTermination+0x54>)
 8004b52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b54:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <prvCheckTasksWaitingTermination+0x58>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	4a0a      	ldr	r2, [pc, #40]	; (8004b84 <prvCheckTasksWaitingTermination+0x58>)
 8004b5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b5e:	f000 fdf1 	bl	8005744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f810 	bl	8004b88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b68:	4b06      	ldr	r3, [pc, #24]	; (8004b84 <prvCheckTasksWaitingTermination+0x58>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1e1      	bne.n	8004b34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b70:	bf00      	nop
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000dd8 	.word	0x20000dd8
 8004b80:	20000e04 	.word	0x20000e04
 8004b84:	20000dec 	.word	0x20000dec

08004b88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3354      	adds	r3, #84	; 0x54
 8004b94:	4618      	mov	r0, r3
 8004b96:	f001 f8fb 	bl	8005d90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d108      	bne.n	8004bb6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 ff89 	bl	8005ac0 <vPortFree>
				vPortFree( pxTCB );
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 ff86 	bl	8005ac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004bb4:	e018      	b.n	8004be8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d103      	bne.n	8004bc8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 ff7d 	bl	8005ac0 <vPortFree>
	}
 8004bc6:	e00f      	b.n	8004be8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d00a      	beq.n	8004be8 <prvDeleteTCB+0x60>
	__asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	60fb      	str	r3, [r7, #12]
}
 8004be4:	bf00      	nop
 8004be6:	e7fe      	b.n	8004be6 <prvDeleteTCB+0x5e>
	}
 8004be8:	bf00      	nop
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <prvResetNextTaskUnblockTime+0x38>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d104      	bne.n	8004c0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <prvResetNextTaskUnblockTime+0x3c>)
 8004c02:	f04f 32ff 	mov.w	r2, #4294967295
 8004c06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c08:	e008      	b.n	8004c1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c0a:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <prvResetNextTaskUnblockTime+0x38>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	4a04      	ldr	r2, [pc, #16]	; (8004c2c <prvResetNextTaskUnblockTime+0x3c>)
 8004c1a:	6013      	str	r3, [r2, #0]
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	20000dbc 	.word	0x20000dbc
 8004c2c:	20000e24 	.word	0x20000e24

08004c30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c36:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <xTaskGetSchedulerState+0x34>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d102      	bne.n	8004c44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	607b      	str	r3, [r7, #4]
 8004c42:	e008      	b.n	8004c56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c44:	4b08      	ldr	r3, [pc, #32]	; (8004c68 <xTaskGetSchedulerState+0x38>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d102      	bne.n	8004c52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	607b      	str	r3, [r7, #4]
 8004c50:	e001      	b.n	8004c56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c52:	2300      	movs	r3, #0
 8004c54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c56:	687b      	ldr	r3, [r7, #4]
	}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	20000e10 	.word	0x20000e10
 8004c68:	20000e2c 	.word	0x20000e2c

08004c6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d056      	beq.n	8004d30 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c82:	4b2e      	ldr	r3, [pc, #184]	; (8004d3c <xTaskPriorityDisinherit+0xd0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d00a      	beq.n	8004ca2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	60fb      	str	r3, [r7, #12]
}
 8004c9e:	bf00      	nop
 8004ca0:	e7fe      	b.n	8004ca0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10a      	bne.n	8004cc0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	60bb      	str	r3, [r7, #8]
}
 8004cbc:	bf00      	nop
 8004cbe:	e7fe      	b.n	8004cbe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc4:	1e5a      	subs	r2, r3, #1
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d02c      	beq.n	8004d30 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d128      	bne.n	8004d30 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fe fc46 	bl	8003574 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <xTaskPriorityDisinherit+0xd4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d903      	bls.n	8004d10 <xTaskPriorityDisinherit+0xa4>
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	4a0c      	ldr	r2, [pc, #48]	; (8004d40 <xTaskPriorityDisinherit+0xd4>)
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <xTaskPriorityDisinherit+0xd8>)
 8004d1e:	441a      	add	r2, r3
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	3304      	adds	r3, #4
 8004d24:	4619      	mov	r1, r3
 8004d26:	4610      	mov	r0, r2
 8004d28:	f7fe fbc7 	bl	80034ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d30:	697b      	ldr	r3, [r7, #20]
	}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000930 	.word	0x20000930
 8004d40:	20000e0c 	.word	0x20000e0c
 8004d44:	20000934 	.word	0x20000934

08004d48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d52:	4b21      	ldr	r3, [pc, #132]	; (8004dd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d58:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fe fc08 	bl	8003574 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6a:	d10a      	bne.n	8004d82 <prvAddCurrentTaskToDelayedList+0x3a>
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d72:	4b1a      	ldr	r3, [pc, #104]	; (8004ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3304      	adds	r3, #4
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4819      	ldr	r0, [pc, #100]	; (8004de0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004d7c:	f7fe fb9d 	bl	80034ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d80:	e026      	b.n	8004dd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4413      	add	r3, r2
 8004d88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d8a:	4b14      	ldr	r3, [pc, #80]	; (8004ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d209      	bcs.n	8004dae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3304      	adds	r3, #4
 8004da4:	4619      	mov	r1, r3
 8004da6:	4610      	mov	r0, r2
 8004da8:	f7fe fbab 	bl	8003502 <vListInsert>
}
 8004dac:	e010      	b.n	8004dd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dae:	4b0e      	ldr	r3, [pc, #56]	; (8004de8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f7fe fba1 	bl	8003502 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004dc0:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <prvAddCurrentTaskToDelayedList+0xa4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d202      	bcs.n	8004dd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004dca:	4a08      	ldr	r2, [pc, #32]	; (8004dec <prvAddCurrentTaskToDelayedList+0xa4>)
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	6013      	str	r3, [r2, #0]
}
 8004dd0:	bf00      	nop
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	20000e08 	.word	0x20000e08
 8004ddc:	20000930 	.word	0x20000930
 8004de0:	20000df0 	.word	0x20000df0
 8004de4:	20000dc0 	.word	0x20000dc0
 8004de8:	20000dbc 	.word	0x20000dbc
 8004dec:	20000e24 	.word	0x20000e24

08004df0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08a      	sub	sp, #40	; 0x28
 8004df4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004dfa:	f000 fb07 	bl	800540c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004dfe:	4b1c      	ldr	r3, [pc, #112]	; (8004e70 <xTimerCreateTimerTask+0x80>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d021      	beq.n	8004e4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e0e:	1d3a      	adds	r2, r7, #4
 8004e10:	f107 0108 	add.w	r1, r7, #8
 8004e14:	f107 030c 	add.w	r3, r7, #12
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fe fb07 	bl	800342c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	9202      	str	r2, [sp, #8]
 8004e26:	9301      	str	r3, [sp, #4]
 8004e28:	2302      	movs	r3, #2
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	460a      	mov	r2, r1
 8004e30:	4910      	ldr	r1, [pc, #64]	; (8004e74 <xTimerCreateTimerTask+0x84>)
 8004e32:	4811      	ldr	r0, [pc, #68]	; (8004e78 <xTimerCreateTimerTask+0x88>)
 8004e34:	f7ff f8b4 	bl	8003fa0 <xTaskCreateStatic>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	4a10      	ldr	r2, [pc, #64]	; (8004e7c <xTimerCreateTimerTask+0x8c>)
 8004e3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004e3e:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <xTimerCreateTimerTask+0x8c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004e46:	2301      	movs	r3, #1
 8004e48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	613b      	str	r3, [r7, #16]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004e66:	697b      	ldr	r3, [r7, #20]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20000e60 	.word	0x20000e60
 8004e74:	08005f24 	.word	0x08005f24
 8004e78:	08004fb5 	.word	0x08004fb5
 8004e7c:	20000e64 	.word	0x20000e64

08004e80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08a      	sub	sp, #40	; 0x28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10a      	bne.n	8004eae <xTimerGenericCommand+0x2e>
	__asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	623b      	str	r3, [r7, #32]
}
 8004eaa:	bf00      	nop
 8004eac:	e7fe      	b.n	8004eac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004eae:	4b1a      	ldr	r3, [pc, #104]	; (8004f18 <xTimerGenericCommand+0x98>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d02a      	beq.n	8004f0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b05      	cmp	r3, #5
 8004ec6:	dc18      	bgt.n	8004efa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ec8:	f7ff feb2 	bl	8004c30 <xTaskGetSchedulerState>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d109      	bne.n	8004ee6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ed2:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <xTimerGenericCommand+0x98>)
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	f107 0110 	add.w	r1, r7, #16
 8004eda:	2300      	movs	r3, #0
 8004edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ede:	f7fe fc77 	bl	80037d0 <xQueueGenericSend>
 8004ee2:	6278      	str	r0, [r7, #36]	; 0x24
 8004ee4:	e012      	b.n	8004f0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ee6:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <xTimerGenericCommand+0x98>)
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	f107 0110 	add.w	r1, r7, #16
 8004eee:	2300      	movs	r3, #0
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f7fe fc6d 	bl	80037d0 <xQueueGenericSend>
 8004ef6:	6278      	str	r0, [r7, #36]	; 0x24
 8004ef8:	e008      	b.n	8004f0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004efa:	4b07      	ldr	r3, [pc, #28]	; (8004f18 <xTimerGenericCommand+0x98>)
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	f107 0110 	add.w	r1, r7, #16
 8004f02:	2300      	movs	r3, #0
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	f7fe fd61 	bl	80039cc <xQueueGenericSendFromISR>
 8004f0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3728      	adds	r7, #40	; 0x28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000e60 	.word	0x20000e60

08004f1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f26:	4b22      	ldr	r3, [pc, #136]	; (8004fb0 <prvProcessExpiredTimer+0x94>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	3304      	adds	r3, #4
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fe fb1d 	bl	8003574 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d022      	beq.n	8004f8e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	699a      	ldr	r2, [r3, #24]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	18d1      	adds	r1, r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	6978      	ldr	r0, [r7, #20]
 8004f56:	f000 f8d1 	bl	80050fc <prvInsertTimerInActiveList>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01f      	beq.n	8004fa0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f60:	2300      	movs	r3, #0
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	2300      	movs	r3, #0
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	2100      	movs	r1, #0
 8004f6a:	6978      	ldr	r0, [r7, #20]
 8004f6c:	f7ff ff88 	bl	8004e80 <xTimerGenericCommand>
 8004f70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d113      	bne.n	8004fa0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	60fb      	str	r3, [r7, #12]
}
 8004f8a:	bf00      	nop
 8004f8c:	e7fe      	b.n	8004f8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f94:	f023 0301 	bic.w	r3, r3, #1
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	6978      	ldr	r0, [r7, #20]
 8004fa6:	4798      	blx	r3
}
 8004fa8:	bf00      	nop
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20000e58 	.word	0x20000e58

08004fb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fbc:	f107 0308 	add.w	r3, r7, #8
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 f857 	bl	8005074 <prvGetNextExpireTime>
 8004fc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 f803 	bl	8004fd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004fd2:	f000 f8d5 	bl	8005180 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fd6:	e7f1      	b.n	8004fbc <prvTimerTask+0x8>

08004fd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004fe2:	f7ff fa39 	bl	8004458 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fe6:	f107 0308 	add.w	r3, r7, #8
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 f866 	bl	80050bc <prvSampleTimeNow>
 8004ff0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d130      	bne.n	800505a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <prvProcessTimerOrBlockTask+0x3c>
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	429a      	cmp	r2, r3
 8005004:	d806      	bhi.n	8005014 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005006:	f7ff fa35 	bl	8004474 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800500a:	68f9      	ldr	r1, [r7, #12]
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff ff85 	bl	8004f1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005012:	e024      	b.n	800505e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d008      	beq.n	800502c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800501a:	4b13      	ldr	r3, [pc, #76]	; (8005068 <prvProcessTimerOrBlockTask+0x90>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <prvProcessTimerOrBlockTask+0x50>
 8005024:	2301      	movs	r3, #1
 8005026:	e000      	b.n	800502a <prvProcessTimerOrBlockTask+0x52>
 8005028:	2300      	movs	r3, #0
 800502a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800502c:	4b0f      	ldr	r3, [pc, #60]	; (800506c <prvProcessTimerOrBlockTask+0x94>)
 800502e:	6818      	ldr	r0, [r3, #0]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	4619      	mov	r1, r3
 800503a:	f7fe ff7d 	bl	8003f38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800503e:	f7ff fa19 	bl	8004474 <xTaskResumeAll>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10a      	bne.n	800505e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005048:	4b09      	ldr	r3, [pc, #36]	; (8005070 <prvProcessTimerOrBlockTask+0x98>)
 800504a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	f3bf 8f6f 	isb	sy
}
 8005058:	e001      	b.n	800505e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800505a:	f7ff fa0b 	bl	8004474 <xTaskResumeAll>
}
 800505e:	bf00      	nop
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20000e5c 	.word	0x20000e5c
 800506c:	20000e60 	.word	0x20000e60
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800507c:	4b0e      	ldr	r3, [pc, #56]	; (80050b8 <prvGetNextExpireTime+0x44>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <prvGetNextExpireTime+0x16>
 8005086:	2201      	movs	r2, #1
 8005088:	e000      	b.n	800508c <prvGetNextExpireTime+0x18>
 800508a:	2200      	movs	r2, #0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d105      	bne.n	80050a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005098:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <prvGetNextExpireTime+0x44>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	e001      	b.n	80050a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80050a8:	68fb      	ldr	r3, [r7, #12]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	20000e58 	.word	0x20000e58

080050bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80050c4:	f7ff fa74 	bl	80045b0 <xTaskGetTickCount>
 80050c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80050ca:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <prvSampleTimeNow+0x3c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d205      	bcs.n	80050e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80050d4:	f000 f936 	bl	8005344 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	e002      	b.n	80050e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80050e6:	4a04      	ldr	r2, [pc, #16]	; (80050f8 <prvSampleTimeNow+0x3c>)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80050ec:	68fb      	ldr	r3, [r7, #12]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20000e68 	.word	0x20000e68

080050fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	429a      	cmp	r2, r3
 8005120:	d812      	bhi.n	8005148 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	1ad2      	subs	r2, r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	429a      	cmp	r2, r3
 800512e:	d302      	bcc.n	8005136 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005130:	2301      	movs	r3, #1
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	e01b      	b.n	800516e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005136:	4b10      	ldr	r3, [pc, #64]	; (8005178 <prvInsertTimerInActiveList+0x7c>)
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3304      	adds	r3, #4
 800513e:	4619      	mov	r1, r3
 8005140:	4610      	mov	r0, r2
 8005142:	f7fe f9de 	bl	8003502 <vListInsert>
 8005146:	e012      	b.n	800516e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d206      	bcs.n	800515e <prvInsertTimerInActiveList+0x62>
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d302      	bcc.n	800515e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005158:	2301      	movs	r3, #1
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	e007      	b.n	800516e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800515e:	4b07      	ldr	r3, [pc, #28]	; (800517c <prvInsertTimerInActiveList+0x80>)
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3304      	adds	r3, #4
 8005166:	4619      	mov	r1, r3
 8005168:	4610      	mov	r0, r2
 800516a:	f7fe f9ca 	bl	8003502 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800516e:	697b      	ldr	r3, [r7, #20]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20000e5c 	.word	0x20000e5c
 800517c:	20000e58 	.word	0x20000e58

08005180 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b08e      	sub	sp, #56	; 0x38
 8005184:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005186:	e0ca      	b.n	800531e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	da18      	bge.n	80051c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800518e:	1d3b      	adds	r3, r7, #4
 8005190:	3304      	adds	r3, #4
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10a      	bne.n	80051b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	61fb      	str	r3, [r7, #28]
}
 80051ac:	bf00      	nop
 80051ae:	e7fe      	b.n	80051ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80051b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051b6:	6850      	ldr	r0, [r2, #4]
 80051b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ba:	6892      	ldr	r2, [r2, #8]
 80051bc:	4611      	mov	r1, r2
 80051be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f2c0 80aa 	blt.w	800531c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d004      	beq.n	80051de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	3304      	adds	r3, #4
 80051d8:	4618      	mov	r0, r3
 80051da:	f7fe f9cb 	bl	8003574 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051de:	463b      	mov	r3, r7
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff ff6b 	bl	80050bc <prvSampleTimeNow>
 80051e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b09      	cmp	r3, #9
 80051ec:	f200 8097 	bhi.w	800531e <prvProcessReceivedCommands+0x19e>
 80051f0:	a201      	add	r2, pc, #4	; (adr r2, 80051f8 <prvProcessReceivedCommands+0x78>)
 80051f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f6:	bf00      	nop
 80051f8:	08005221 	.word	0x08005221
 80051fc:	08005221 	.word	0x08005221
 8005200:	08005221 	.word	0x08005221
 8005204:	08005295 	.word	0x08005295
 8005208:	080052a9 	.word	0x080052a9
 800520c:	080052f3 	.word	0x080052f3
 8005210:	08005221 	.word	0x08005221
 8005214:	08005221 	.word	0x08005221
 8005218:	08005295 	.word	0x08005295
 800521c:	080052a9 	.word	0x080052a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005226:	f043 0301 	orr.w	r3, r3, #1
 800522a:	b2da      	uxtb	r2, r3
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	18d1      	adds	r1, r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005240:	f7ff ff5c 	bl	80050fc <prvInsertTimerInActiveList>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d069      	beq.n	800531e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005250:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	d05e      	beq.n	800531e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	441a      	add	r2, r3
 8005268:	2300      	movs	r3, #0
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	2300      	movs	r3, #0
 800526e:	2100      	movs	r1, #0
 8005270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005272:	f7ff fe05 	bl	8004e80 <xTimerGenericCommand>
 8005276:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d14f      	bne.n	800531e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	61bb      	str	r3, [r7, #24]
}
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800529a:	f023 0301 	bic.w	r3, r3, #1
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80052a6:	e03a      	b.n	800531e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80052c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10a      	bne.n	80052de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	617b      	str	r3, [r7, #20]
}
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80052de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	18d1      	adds	r1, r2, r3
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ec:	f7ff ff06 	bl	80050fc <prvInsertTimerInActiveList>
					break;
 80052f0:	e015      	b.n	800531e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d103      	bne.n	8005308 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005302:	f000 fbdd 	bl	8005ac0 <vPortFree>
 8005306:	e00a      	b.n	800531e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800530e:	f023 0301 	bic.w	r3, r3, #1
 8005312:	b2da      	uxtb	r2, r3
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800531a:	e000      	b.n	800531e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800531c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800531e:	4b08      	ldr	r3, [pc, #32]	; (8005340 <prvProcessReceivedCommands+0x1c0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	1d39      	adds	r1, r7, #4
 8005324:	2200      	movs	r2, #0
 8005326:	4618      	mov	r0, r3
 8005328:	f7fe fbec 	bl	8003b04 <xQueueReceive>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	f47f af2a 	bne.w	8005188 <prvProcessReceivedCommands+0x8>
	}
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	3730      	adds	r7, #48	; 0x30
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20000e60 	.word	0x20000e60

08005344 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800534a:	e048      	b.n	80053de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800534c:	4b2d      	ldr	r3, [pc, #180]	; (8005404 <prvSwitchTimerLists+0xc0>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005356:	4b2b      	ldr	r3, [pc, #172]	; (8005404 <prvSwitchTimerLists+0xc0>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	3304      	adds	r3, #4
 8005364:	4618      	mov	r0, r3
 8005366:	f7fe f905 	bl	8003574 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d02e      	beq.n	80053de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4413      	add	r3, r2
 8005388:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	429a      	cmp	r2, r3
 8005390:	d90e      	bls.n	80053b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800539e:	4b19      	ldr	r3, [pc, #100]	; (8005404 <prvSwitchTimerLists+0xc0>)
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3304      	adds	r3, #4
 80053a6:	4619      	mov	r1, r3
 80053a8:	4610      	mov	r0, r2
 80053aa:	f7fe f8aa 	bl	8003502 <vListInsert>
 80053ae:	e016      	b.n	80053de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053b0:	2300      	movs	r3, #0
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	2300      	movs	r3, #0
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	2100      	movs	r1, #0
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f7ff fd60 	bl	8004e80 <xTimerGenericCommand>
 80053c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	603b      	str	r3, [r7, #0]
}
 80053da:	bf00      	nop
 80053dc:	e7fe      	b.n	80053dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053de:	4b09      	ldr	r3, [pc, #36]	; (8005404 <prvSwitchTimerLists+0xc0>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1b1      	bne.n	800534c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80053e8:	4b06      	ldr	r3, [pc, #24]	; (8005404 <prvSwitchTimerLists+0xc0>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80053ee:	4b06      	ldr	r3, [pc, #24]	; (8005408 <prvSwitchTimerLists+0xc4>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a04      	ldr	r2, [pc, #16]	; (8005404 <prvSwitchTimerLists+0xc0>)
 80053f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80053f6:	4a04      	ldr	r2, [pc, #16]	; (8005408 <prvSwitchTimerLists+0xc4>)
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	6013      	str	r3, [r2, #0]
}
 80053fc:	bf00      	nop
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000e58 	.word	0x20000e58
 8005408:	20000e5c 	.word	0x20000e5c

0800540c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005412:	f000 f967 	bl	80056e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005416:	4b15      	ldr	r3, [pc, #84]	; (800546c <prvCheckForValidListAndQueue+0x60>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d120      	bne.n	8005460 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800541e:	4814      	ldr	r0, [pc, #80]	; (8005470 <prvCheckForValidListAndQueue+0x64>)
 8005420:	f7fe f81e 	bl	8003460 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005424:	4813      	ldr	r0, [pc, #76]	; (8005474 <prvCheckForValidListAndQueue+0x68>)
 8005426:	f7fe f81b 	bl	8003460 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800542a:	4b13      	ldr	r3, [pc, #76]	; (8005478 <prvCheckForValidListAndQueue+0x6c>)
 800542c:	4a10      	ldr	r2, [pc, #64]	; (8005470 <prvCheckForValidListAndQueue+0x64>)
 800542e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005430:	4b12      	ldr	r3, [pc, #72]	; (800547c <prvCheckForValidListAndQueue+0x70>)
 8005432:	4a10      	ldr	r2, [pc, #64]	; (8005474 <prvCheckForValidListAndQueue+0x68>)
 8005434:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005436:	2300      	movs	r3, #0
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	4b11      	ldr	r3, [pc, #68]	; (8005480 <prvCheckForValidListAndQueue+0x74>)
 800543c:	4a11      	ldr	r2, [pc, #68]	; (8005484 <prvCheckForValidListAndQueue+0x78>)
 800543e:	2110      	movs	r1, #16
 8005440:	200a      	movs	r0, #10
 8005442:	f7fe f929 	bl	8003698 <xQueueGenericCreateStatic>
 8005446:	4603      	mov	r3, r0
 8005448:	4a08      	ldr	r2, [pc, #32]	; (800546c <prvCheckForValidListAndQueue+0x60>)
 800544a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800544c:	4b07      	ldr	r3, [pc, #28]	; (800546c <prvCheckForValidListAndQueue+0x60>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <prvCheckForValidListAndQueue+0x60>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	490b      	ldr	r1, [pc, #44]	; (8005488 <prvCheckForValidListAndQueue+0x7c>)
 800545a:	4618      	mov	r0, r3
 800545c:	f7fe fd42 	bl	8003ee4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005460:	f000 f970 	bl	8005744 <vPortExitCritical>
}
 8005464:	bf00      	nop
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20000e60 	.word	0x20000e60
 8005470:	20000e30 	.word	0x20000e30
 8005474:	20000e44 	.word	0x20000e44
 8005478:	20000e58 	.word	0x20000e58
 800547c:	20000e5c 	.word	0x20000e5c
 8005480:	20000f0c 	.word	0x20000f0c
 8005484:	20000e6c 	.word	0x20000e6c
 8005488:	08005f2c 	.word	0x08005f2c

0800548c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3b04      	subs	r3, #4
 800549c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	3b04      	subs	r3, #4
 80054aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f023 0201 	bic.w	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3b04      	subs	r3, #4
 80054ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054bc:	4a0c      	ldr	r2, [pc, #48]	; (80054f0 <pxPortInitialiseStack+0x64>)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	3b14      	subs	r3, #20
 80054c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3b04      	subs	r3, #4
 80054d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f06f 0202 	mvn.w	r2, #2
 80054da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3b20      	subs	r3, #32
 80054e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80054e2:	68fb      	ldr	r3, [r7, #12]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	080054f5 	.word	0x080054f5

080054f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80054fe:	4b12      	ldr	r3, [pc, #72]	; (8005548 <prvTaskExitError+0x54>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005506:	d00a      	beq.n	800551e <prvTaskExitError+0x2a>
	__asm volatile
 8005508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	60fb      	str	r3, [r7, #12]
}
 800551a:	bf00      	nop
 800551c:	e7fe      	b.n	800551c <prvTaskExitError+0x28>
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	60bb      	str	r3, [r7, #8]
}
 8005530:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005532:	bf00      	nop
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0fc      	beq.n	8005534 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800553a:	bf00      	nop
 800553c:	bf00      	nop
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	2000000c 	.word	0x2000000c
 800554c:	00000000 	.word	0x00000000

08005550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <pxCurrentTCBConst2>)
 8005552:	6819      	ldr	r1, [r3, #0]
 8005554:	6808      	ldr	r0, [r1, #0]
 8005556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555a:	f380 8809 	msr	PSP, r0
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f04f 0000 	mov.w	r0, #0
 8005566:	f380 8811 	msr	BASEPRI, r0
 800556a:	4770      	bx	lr
 800556c:	f3af 8000 	nop.w

08005570 <pxCurrentTCBConst2>:
 8005570:	20000930 	.word	0x20000930
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop

08005578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005578:	4808      	ldr	r0, [pc, #32]	; (800559c <prvPortStartFirstTask+0x24>)
 800557a:	6800      	ldr	r0, [r0, #0]
 800557c:	6800      	ldr	r0, [r0, #0]
 800557e:	f380 8808 	msr	MSP, r0
 8005582:	f04f 0000 	mov.w	r0, #0
 8005586:	f380 8814 	msr	CONTROL, r0
 800558a:	b662      	cpsie	i
 800558c:	b661      	cpsie	f
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	df00      	svc	0
 8005598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800559a:	bf00      	nop
 800559c:	e000ed08 	.word	0xe000ed08

080055a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055a6:	4b46      	ldr	r3, [pc, #280]	; (80056c0 <xPortStartScheduler+0x120>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a46      	ldr	r2, [pc, #280]	; (80056c4 <xPortStartScheduler+0x124>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d10a      	bne.n	80055c6 <xPortStartScheduler+0x26>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	613b      	str	r3, [r7, #16]
}
 80055c2:	bf00      	nop
 80055c4:	e7fe      	b.n	80055c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80055c6:	4b3e      	ldr	r3, [pc, #248]	; (80056c0 <xPortStartScheduler+0x120>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a3f      	ldr	r2, [pc, #252]	; (80056c8 <xPortStartScheduler+0x128>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d10a      	bne.n	80055e6 <xPortStartScheduler+0x46>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	60fb      	str	r3, [r7, #12]
}
 80055e2:	bf00      	nop
 80055e4:	e7fe      	b.n	80055e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80055e6:	4b39      	ldr	r3, [pc, #228]	; (80056cc <xPortStartScheduler+0x12c>)
 80055e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	22ff      	movs	r2, #255	; 0xff
 80055f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	b2db      	uxtb	r3, r3
 8005604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005608:	b2da      	uxtb	r2, r3
 800560a:	4b31      	ldr	r3, [pc, #196]	; (80056d0 <xPortStartScheduler+0x130>)
 800560c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800560e:	4b31      	ldr	r3, [pc, #196]	; (80056d4 <xPortStartScheduler+0x134>)
 8005610:	2207      	movs	r2, #7
 8005612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005614:	e009      	b.n	800562a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005616:	4b2f      	ldr	r3, [pc, #188]	; (80056d4 <xPortStartScheduler+0x134>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3b01      	subs	r3, #1
 800561c:	4a2d      	ldr	r2, [pc, #180]	; (80056d4 <xPortStartScheduler+0x134>)
 800561e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	b2db      	uxtb	r3, r3
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	b2db      	uxtb	r3, r3
 8005628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800562a:	78fb      	ldrb	r3, [r7, #3]
 800562c:	b2db      	uxtb	r3, r3
 800562e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005632:	2b80      	cmp	r3, #128	; 0x80
 8005634:	d0ef      	beq.n	8005616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005636:	4b27      	ldr	r3, [pc, #156]	; (80056d4 <xPortStartScheduler+0x134>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f1c3 0307 	rsb	r3, r3, #7
 800563e:	2b04      	cmp	r3, #4
 8005640:	d00a      	beq.n	8005658 <xPortStartScheduler+0xb8>
	__asm volatile
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	60bb      	str	r3, [r7, #8]
}
 8005654:	bf00      	nop
 8005656:	e7fe      	b.n	8005656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005658:	4b1e      	ldr	r3, [pc, #120]	; (80056d4 <xPortStartScheduler+0x134>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	021b      	lsls	r3, r3, #8
 800565e:	4a1d      	ldr	r2, [pc, #116]	; (80056d4 <xPortStartScheduler+0x134>)
 8005660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005662:	4b1c      	ldr	r3, [pc, #112]	; (80056d4 <xPortStartScheduler+0x134>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800566a:	4a1a      	ldr	r2, [pc, #104]	; (80056d4 <xPortStartScheduler+0x134>)
 800566c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	b2da      	uxtb	r2, r3
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005676:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <xPortStartScheduler+0x138>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a17      	ldr	r2, [pc, #92]	; (80056d8 <xPortStartScheduler+0x138>)
 800567c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005682:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <xPortStartScheduler+0x138>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a14      	ldr	r2, [pc, #80]	; (80056d8 <xPortStartScheduler+0x138>)
 8005688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800568c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800568e:	f000 f8dd 	bl	800584c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005692:	4b12      	ldr	r3, [pc, #72]	; (80056dc <xPortStartScheduler+0x13c>)
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005698:	f000 f8fc 	bl	8005894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800569c:	4b10      	ldr	r3, [pc, #64]	; (80056e0 <xPortStartScheduler+0x140>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a0f      	ldr	r2, [pc, #60]	; (80056e0 <xPortStartScheduler+0x140>)
 80056a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80056a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056a8:	f7ff ff66 	bl	8005578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056ac:	f7ff f84a 	bl	8004744 <vTaskSwitchContext>
	prvTaskExitError();
 80056b0:	f7ff ff20 	bl	80054f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	e000ed00 	.word	0xe000ed00
 80056c4:	410fc271 	.word	0x410fc271
 80056c8:	410fc270 	.word	0x410fc270
 80056cc:	e000e400 	.word	0xe000e400
 80056d0:	20000f5c 	.word	0x20000f5c
 80056d4:	20000f60 	.word	0x20000f60
 80056d8:	e000ed20 	.word	0xe000ed20
 80056dc:	2000000c 	.word	0x2000000c
 80056e0:	e000ef34 	.word	0xe000ef34

080056e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	607b      	str	r3, [r7, #4]
}
 80056fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80056fe:	4b0f      	ldr	r3, [pc, #60]	; (800573c <vPortEnterCritical+0x58>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3301      	adds	r3, #1
 8005704:	4a0d      	ldr	r2, [pc, #52]	; (800573c <vPortEnterCritical+0x58>)
 8005706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005708:	4b0c      	ldr	r3, [pc, #48]	; (800573c <vPortEnterCritical+0x58>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d10f      	bne.n	8005730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005710:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <vPortEnterCritical+0x5c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <vPortEnterCritical+0x4c>
	__asm volatile
 800571a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	603b      	str	r3, [r7, #0]
}
 800572c:	bf00      	nop
 800572e:	e7fe      	b.n	800572e <vPortEnterCritical+0x4a>
	}
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	2000000c 	.word	0x2000000c
 8005740:	e000ed04 	.word	0xe000ed04

08005744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800574a:	4b12      	ldr	r3, [pc, #72]	; (8005794 <vPortExitCritical+0x50>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10a      	bne.n	8005768 <vPortExitCritical+0x24>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	607b      	str	r3, [r7, #4]
}
 8005764:	bf00      	nop
 8005766:	e7fe      	b.n	8005766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005768:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <vPortExitCritical+0x50>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3b01      	subs	r3, #1
 800576e:	4a09      	ldr	r2, [pc, #36]	; (8005794 <vPortExitCritical+0x50>)
 8005770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005772:	4b08      	ldr	r3, [pc, #32]	; (8005794 <vPortExitCritical+0x50>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d105      	bne.n	8005786 <vPortExitCritical+0x42>
 800577a:	2300      	movs	r3, #0
 800577c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	f383 8811 	msr	BASEPRI, r3
}
 8005784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	2000000c 	.word	0x2000000c
	...

080057a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057a0:	f3ef 8009 	mrs	r0, PSP
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	4b15      	ldr	r3, [pc, #84]	; (8005800 <pxCurrentTCBConst>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	f01e 0f10 	tst.w	lr, #16
 80057b0:	bf08      	it	eq
 80057b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80057b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ba:	6010      	str	r0, [r2, #0]
 80057bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80057c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80057c4:	f380 8811 	msr	BASEPRI, r0
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f7fe ffb8 	bl	8004744 <vTaskSwitchContext>
 80057d4:	f04f 0000 	mov.w	r0, #0
 80057d8:	f380 8811 	msr	BASEPRI, r0
 80057dc:	bc09      	pop	{r0, r3}
 80057de:	6819      	ldr	r1, [r3, #0]
 80057e0:	6808      	ldr	r0, [r1, #0]
 80057e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e6:	f01e 0f10 	tst.w	lr, #16
 80057ea:	bf08      	it	eq
 80057ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80057f0:	f380 8809 	msr	PSP, r0
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	f3af 8000 	nop.w

08005800 <pxCurrentTCBConst>:
 8005800:	20000930 	.word	0x20000930
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop

08005808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	607b      	str	r3, [r7, #4]
}
 8005820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005822:	f7fe fed5 	bl	80045d0 <xTaskIncrementTick>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800582c:	4b06      	ldr	r3, [pc, #24]	; (8005848 <xPortSysTickHandler+0x40>)
 800582e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	2300      	movs	r3, #0
 8005836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	f383 8811 	msr	BASEPRI, r3
}
 800583e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005840:	bf00      	nop
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	e000ed04 	.word	0xe000ed04

0800584c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005850:	4b0b      	ldr	r3, [pc, #44]	; (8005880 <vPortSetupTimerInterrupt+0x34>)
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005856:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <vPortSetupTimerInterrupt+0x38>)
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800585c:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <vPortSetupTimerInterrupt+0x3c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a0a      	ldr	r2, [pc, #40]	; (800588c <vPortSetupTimerInterrupt+0x40>)
 8005862:	fba2 2303 	umull	r2, r3, r2, r3
 8005866:	099b      	lsrs	r3, r3, #6
 8005868:	4a09      	ldr	r2, [pc, #36]	; (8005890 <vPortSetupTimerInterrupt+0x44>)
 800586a:	3b01      	subs	r3, #1
 800586c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800586e:	4b04      	ldr	r3, [pc, #16]	; (8005880 <vPortSetupTimerInterrupt+0x34>)
 8005870:	2207      	movs	r2, #7
 8005872:	601a      	str	r2, [r3, #0]
}
 8005874:	bf00      	nop
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	e000e010 	.word	0xe000e010
 8005884:	e000e018 	.word	0xe000e018
 8005888:	20000000 	.word	0x20000000
 800588c:	10624dd3 	.word	0x10624dd3
 8005890:	e000e014 	.word	0xe000e014

08005894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80058a4 <vPortEnableVFP+0x10>
 8005898:	6801      	ldr	r1, [r0, #0]
 800589a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800589e:	6001      	str	r1, [r0, #0]
 80058a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80058a2:	bf00      	nop
 80058a4:	e000ed88 	.word	0xe000ed88

080058a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80058ae:	f3ef 8305 	mrs	r3, IPSR
 80058b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b0f      	cmp	r3, #15
 80058b8:	d914      	bls.n	80058e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80058ba:	4a17      	ldr	r2, [pc, #92]	; (8005918 <vPortValidateInterruptPriority+0x70>)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80058c4:	4b15      	ldr	r3, [pc, #84]	; (800591c <vPortValidateInterruptPriority+0x74>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	7afa      	ldrb	r2, [r7, #11]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d20a      	bcs.n	80058e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	607b      	str	r3, [r7, #4]
}
 80058e0:	bf00      	nop
 80058e2:	e7fe      	b.n	80058e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80058e4:	4b0e      	ldr	r3, [pc, #56]	; (8005920 <vPortValidateInterruptPriority+0x78>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058ec:	4b0d      	ldr	r3, [pc, #52]	; (8005924 <vPortValidateInterruptPriority+0x7c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d90a      	bls.n	800590a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	603b      	str	r3, [r7, #0]
}
 8005906:	bf00      	nop
 8005908:	e7fe      	b.n	8005908 <vPortValidateInterruptPriority+0x60>
	}
 800590a:	bf00      	nop
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	e000e3f0 	.word	0xe000e3f0
 800591c:	20000f5c 	.word	0x20000f5c
 8005920:	e000ed0c 	.word	0xe000ed0c
 8005924:	20000f60 	.word	0x20000f60

08005928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b08a      	sub	sp, #40	; 0x28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005930:	2300      	movs	r3, #0
 8005932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005934:	f7fe fd90 	bl	8004458 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005938:	4b5b      	ldr	r3, [pc, #364]	; (8005aa8 <pvPortMalloc+0x180>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005940:	f000 f920 	bl	8005b84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005944:	4b59      	ldr	r3, [pc, #356]	; (8005aac <pvPortMalloc+0x184>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4013      	ands	r3, r2
 800594c:	2b00      	cmp	r3, #0
 800594e:	f040 8093 	bne.w	8005a78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01d      	beq.n	8005994 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005958:	2208      	movs	r2, #8
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4413      	add	r3, r2
 800595e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	2b00      	cmp	r3, #0
 8005968:	d014      	beq.n	8005994 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f023 0307 	bic.w	r3, r3, #7
 8005970:	3308      	adds	r3, #8
 8005972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <pvPortMalloc+0x6c>
	__asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	617b      	str	r3, [r7, #20]
}
 8005990:	bf00      	nop
 8005992:	e7fe      	b.n	8005992 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d06e      	beq.n	8005a78 <pvPortMalloc+0x150>
 800599a:	4b45      	ldr	r3, [pc, #276]	; (8005ab0 <pvPortMalloc+0x188>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d869      	bhi.n	8005a78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80059a4:	4b43      	ldr	r3, [pc, #268]	; (8005ab4 <pvPortMalloc+0x18c>)
 80059a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80059a8:	4b42      	ldr	r3, [pc, #264]	; (8005ab4 <pvPortMalloc+0x18c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059ae:	e004      	b.n	80059ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d903      	bls.n	80059cc <pvPortMalloc+0xa4>
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1f1      	bne.n	80059b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80059cc:	4b36      	ldr	r3, [pc, #216]	; (8005aa8 <pvPortMalloc+0x180>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d050      	beq.n	8005a78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2208      	movs	r2, #8
 80059dc:	4413      	add	r3, r2
 80059de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	1ad2      	subs	r2, r2, r3
 80059f0:	2308      	movs	r3, #8
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d91f      	bls.n	8005a38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4413      	add	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <pvPortMalloc+0xf8>
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	613b      	str	r3, [r7, #16]
}
 8005a1c:	bf00      	nop
 8005a1e:	e7fe      	b.n	8005a1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	1ad2      	subs	r2, r2, r3
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a32:	69b8      	ldr	r0, [r7, #24]
 8005a34:	f000 f908 	bl	8005c48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a38:	4b1d      	ldr	r3, [pc, #116]	; (8005ab0 <pvPortMalloc+0x188>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	4a1b      	ldr	r2, [pc, #108]	; (8005ab0 <pvPortMalloc+0x188>)
 8005a44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a46:	4b1a      	ldr	r3, [pc, #104]	; (8005ab0 <pvPortMalloc+0x188>)
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <pvPortMalloc+0x190>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d203      	bcs.n	8005a5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a52:	4b17      	ldr	r3, [pc, #92]	; (8005ab0 <pvPortMalloc+0x188>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a18      	ldr	r2, [pc, #96]	; (8005ab8 <pvPortMalloc+0x190>)
 8005a58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	4b13      	ldr	r3, [pc, #76]	; (8005aac <pvPortMalloc+0x184>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	431a      	orrs	r2, r3
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005a6e:	4b13      	ldr	r3, [pc, #76]	; (8005abc <pvPortMalloc+0x194>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3301      	adds	r3, #1
 8005a74:	4a11      	ldr	r2, [pc, #68]	; (8005abc <pvPortMalloc+0x194>)
 8005a76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a78:	f7fe fcfc 	bl	8004474 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <pvPortMalloc+0x174>
	__asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	60fb      	str	r3, [r7, #12]
}
 8005a98:	bf00      	nop
 8005a9a:	e7fe      	b.n	8005a9a <pvPortMalloc+0x172>
	return pvReturn;
 8005a9c:	69fb      	ldr	r3, [r7, #28]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3728      	adds	r7, #40	; 0x28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20001b6c 	.word	0x20001b6c
 8005aac:	20001b80 	.word	0x20001b80
 8005ab0:	20001b70 	.word	0x20001b70
 8005ab4:	20001b64 	.word	0x20001b64
 8005ab8:	20001b74 	.word	0x20001b74
 8005abc:	20001b78 	.word	0x20001b78

08005ac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d04d      	beq.n	8005b6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ad2:	2308      	movs	r3, #8
 8005ad4:	425b      	negs	r3, r3
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4413      	add	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	4b24      	ldr	r3, [pc, #144]	; (8005b78 <vPortFree+0xb8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <vPortFree+0x44>
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	60fb      	str	r3, [r7, #12]
}
 8005b00:	bf00      	nop
 8005b02:	e7fe      	b.n	8005b02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <vPortFree+0x62>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	60bb      	str	r3, [r7, #8]
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	4b14      	ldr	r3, [pc, #80]	; (8005b78 <vPortFree+0xb8>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d01e      	beq.n	8005b6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d11a      	bne.n	8005b6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	4b0e      	ldr	r3, [pc, #56]	; (8005b78 <vPortFree+0xb8>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	43db      	mvns	r3, r3
 8005b42:	401a      	ands	r2, r3
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b48:	f7fe fc86 	bl	8004458 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <vPortFree+0xbc>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4413      	add	r3, r2
 8005b56:	4a09      	ldr	r2, [pc, #36]	; (8005b7c <vPortFree+0xbc>)
 8005b58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b5a:	6938      	ldr	r0, [r7, #16]
 8005b5c:	f000 f874 	bl	8005c48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005b60:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <vPortFree+0xc0>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3301      	adds	r3, #1
 8005b66:	4a06      	ldr	r2, [pc, #24]	; (8005b80 <vPortFree+0xc0>)
 8005b68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005b6a:	f7fe fc83 	bl	8004474 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b6e:	bf00      	nop
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20001b80 	.word	0x20001b80
 8005b7c:	20001b70 	.word	0x20001b70
 8005b80:	20001b7c 	.word	0x20001b7c

08005b84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005b8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b90:	4b27      	ldr	r3, [pc, #156]	; (8005c30 <prvHeapInit+0xac>)
 8005b92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00c      	beq.n	8005bb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3307      	adds	r3, #7
 8005ba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0307 	bic.w	r3, r3, #7
 8005baa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	4a1f      	ldr	r2, [pc, #124]	; (8005c30 <prvHeapInit+0xac>)
 8005bb4:	4413      	add	r3, r2
 8005bb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005bbc:	4a1d      	ldr	r2, [pc, #116]	; (8005c34 <prvHeapInit+0xb0>)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005bc2:	4b1c      	ldr	r3, [pc, #112]	; (8005c34 <prvHeapInit+0xb0>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	4413      	add	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005bd0:	2208      	movs	r2, #8
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0307 	bic.w	r3, r3, #7
 8005bde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4a15      	ldr	r2, [pc, #84]	; (8005c38 <prvHeapInit+0xb4>)
 8005be4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005be6:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <prvHeapInit+0xb4>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2200      	movs	r2, #0
 8005bec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005bee:	4b12      	ldr	r3, [pc, #72]	; (8005c38 <prvHeapInit+0xb4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	1ad2      	subs	r2, r2, r3
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c04:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <prvHeapInit+0xb4>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	4a0a      	ldr	r2, [pc, #40]	; (8005c3c <prvHeapInit+0xb8>)
 8005c12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	4a09      	ldr	r2, [pc, #36]	; (8005c40 <prvHeapInit+0xbc>)
 8005c1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c1c:	4b09      	ldr	r3, [pc, #36]	; (8005c44 <prvHeapInit+0xc0>)
 8005c1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c22:	601a      	str	r2, [r3, #0]
}
 8005c24:	bf00      	nop
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	20000f64 	.word	0x20000f64
 8005c34:	20001b64 	.word	0x20001b64
 8005c38:	20001b6c 	.word	0x20001b6c
 8005c3c:	20001b74 	.word	0x20001b74
 8005c40:	20001b70 	.word	0x20001b70
 8005c44:	20001b80 	.word	0x20001b80

08005c48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c50:	4b28      	ldr	r3, [pc, #160]	; (8005cf4 <prvInsertBlockIntoFreeList+0xac>)
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	e002      	b.n	8005c5c <prvInsertBlockIntoFreeList+0x14>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d8f7      	bhi.n	8005c56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	4413      	add	r3, r2
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d108      	bne.n	8005c8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	441a      	add	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	441a      	add	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d118      	bne.n	8005cd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	4b15      	ldr	r3, [pc, #84]	; (8005cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d00d      	beq.n	8005cc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	441a      	add	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	e008      	b.n	8005cd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005cc6:	4b0c      	ldr	r3, [pc, #48]	; (8005cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	e003      	b.n	8005cd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d002      	beq.n	8005ce6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ce6:	bf00      	nop
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	20001b64 	.word	0x20001b64
 8005cf8:	20001b6c 	.word	0x20001b6c

08005cfc <__libc_init_array>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	4d0d      	ldr	r5, [pc, #52]	; (8005d34 <__libc_init_array+0x38>)
 8005d00:	4c0d      	ldr	r4, [pc, #52]	; (8005d38 <__libc_init_array+0x3c>)
 8005d02:	1b64      	subs	r4, r4, r5
 8005d04:	10a4      	asrs	r4, r4, #2
 8005d06:	2600      	movs	r6, #0
 8005d08:	42a6      	cmp	r6, r4
 8005d0a:	d109      	bne.n	8005d20 <__libc_init_array+0x24>
 8005d0c:	4d0b      	ldr	r5, [pc, #44]	; (8005d3c <__libc_init_array+0x40>)
 8005d0e:	4c0c      	ldr	r4, [pc, #48]	; (8005d40 <__libc_init_array+0x44>)
 8005d10:	f000 f8f2 	bl	8005ef8 <_init>
 8005d14:	1b64      	subs	r4, r4, r5
 8005d16:	10a4      	asrs	r4, r4, #2
 8005d18:	2600      	movs	r6, #0
 8005d1a:	42a6      	cmp	r6, r4
 8005d1c:	d105      	bne.n	8005d2a <__libc_init_array+0x2e>
 8005d1e:	bd70      	pop	{r4, r5, r6, pc}
 8005d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d24:	4798      	blx	r3
 8005d26:	3601      	adds	r6, #1
 8005d28:	e7ee      	b.n	8005d08 <__libc_init_array+0xc>
 8005d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d2e:	4798      	blx	r3
 8005d30:	3601      	adds	r6, #1
 8005d32:	e7f2      	b.n	8005d1a <__libc_init_array+0x1e>
 8005d34:	08006000 	.word	0x08006000
 8005d38:	08006000 	.word	0x08006000
 8005d3c:	08006000 	.word	0x08006000
 8005d40:	08006004 	.word	0x08006004

08005d44 <__retarget_lock_acquire_recursive>:
 8005d44:	4770      	bx	lr

08005d46 <__retarget_lock_release_recursive>:
 8005d46:	4770      	bx	lr

08005d48 <memcpy>:
 8005d48:	440a      	add	r2, r1
 8005d4a:	4291      	cmp	r1, r2
 8005d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d50:	d100      	bne.n	8005d54 <memcpy+0xc>
 8005d52:	4770      	bx	lr
 8005d54:	b510      	push	{r4, lr}
 8005d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d5e:	4291      	cmp	r1, r2
 8005d60:	d1f9      	bne.n	8005d56 <memcpy+0xe>
 8005d62:	bd10      	pop	{r4, pc}

08005d64 <memset>:
 8005d64:	4402      	add	r2, r0
 8005d66:	4603      	mov	r3, r0
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d100      	bne.n	8005d6e <memset+0xa>
 8005d6c:	4770      	bx	lr
 8005d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d72:	e7f9      	b.n	8005d68 <memset+0x4>

08005d74 <cleanup_glue>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	460c      	mov	r4, r1
 8005d78:	6809      	ldr	r1, [r1, #0]
 8005d7a:	4605      	mov	r5, r0
 8005d7c:	b109      	cbz	r1, 8005d82 <cleanup_glue+0xe>
 8005d7e:	f7ff fff9 	bl	8005d74 <cleanup_glue>
 8005d82:	4621      	mov	r1, r4
 8005d84:	4628      	mov	r0, r5
 8005d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d8a:	f000 b869 	b.w	8005e60 <_free_r>
	...

08005d90 <_reclaim_reent>:
 8005d90:	4b2c      	ldr	r3, [pc, #176]	; (8005e44 <_reclaim_reent+0xb4>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4283      	cmp	r3, r0
 8005d96:	b570      	push	{r4, r5, r6, lr}
 8005d98:	4604      	mov	r4, r0
 8005d9a:	d051      	beq.n	8005e40 <_reclaim_reent+0xb0>
 8005d9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d9e:	b143      	cbz	r3, 8005db2 <_reclaim_reent+0x22>
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d14a      	bne.n	8005e3c <_reclaim_reent+0xac>
 8005da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005da8:	6819      	ldr	r1, [r3, #0]
 8005daa:	b111      	cbz	r1, 8005db2 <_reclaim_reent+0x22>
 8005dac:	4620      	mov	r0, r4
 8005dae:	f000 f857 	bl	8005e60 <_free_r>
 8005db2:	6961      	ldr	r1, [r4, #20]
 8005db4:	b111      	cbz	r1, 8005dbc <_reclaim_reent+0x2c>
 8005db6:	4620      	mov	r0, r4
 8005db8:	f000 f852 	bl	8005e60 <_free_r>
 8005dbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005dbe:	b111      	cbz	r1, 8005dc6 <_reclaim_reent+0x36>
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f000 f84d 	bl	8005e60 <_free_r>
 8005dc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005dc8:	b111      	cbz	r1, 8005dd0 <_reclaim_reent+0x40>
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f000 f848 	bl	8005e60 <_free_r>
 8005dd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005dd2:	b111      	cbz	r1, 8005dda <_reclaim_reent+0x4a>
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f000 f843 	bl	8005e60 <_free_r>
 8005dda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005ddc:	b111      	cbz	r1, 8005de4 <_reclaim_reent+0x54>
 8005dde:	4620      	mov	r0, r4
 8005de0:	f000 f83e 	bl	8005e60 <_free_r>
 8005de4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005de6:	b111      	cbz	r1, 8005dee <_reclaim_reent+0x5e>
 8005de8:	4620      	mov	r0, r4
 8005dea:	f000 f839 	bl	8005e60 <_free_r>
 8005dee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005df0:	b111      	cbz	r1, 8005df8 <_reclaim_reent+0x68>
 8005df2:	4620      	mov	r0, r4
 8005df4:	f000 f834 	bl	8005e60 <_free_r>
 8005df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dfa:	b111      	cbz	r1, 8005e02 <_reclaim_reent+0x72>
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f000 f82f 	bl	8005e60 <_free_r>
 8005e02:	69a3      	ldr	r3, [r4, #24]
 8005e04:	b1e3      	cbz	r3, 8005e40 <_reclaim_reent+0xb0>
 8005e06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005e08:	4620      	mov	r0, r4
 8005e0a:	4798      	blx	r3
 8005e0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005e0e:	b1b9      	cbz	r1, 8005e40 <_reclaim_reent+0xb0>
 8005e10:	4620      	mov	r0, r4
 8005e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005e16:	f7ff bfad 	b.w	8005d74 <cleanup_glue>
 8005e1a:	5949      	ldr	r1, [r1, r5]
 8005e1c:	b941      	cbnz	r1, 8005e30 <_reclaim_reent+0xa0>
 8005e1e:	3504      	adds	r5, #4
 8005e20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e22:	2d80      	cmp	r5, #128	; 0x80
 8005e24:	68d9      	ldr	r1, [r3, #12]
 8005e26:	d1f8      	bne.n	8005e1a <_reclaim_reent+0x8a>
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f000 f819 	bl	8005e60 <_free_r>
 8005e2e:	e7ba      	b.n	8005da6 <_reclaim_reent+0x16>
 8005e30:	680e      	ldr	r6, [r1, #0]
 8005e32:	4620      	mov	r0, r4
 8005e34:	f000 f814 	bl	8005e60 <_free_r>
 8005e38:	4631      	mov	r1, r6
 8005e3a:	e7ef      	b.n	8005e1c <_reclaim_reent+0x8c>
 8005e3c:	2500      	movs	r5, #0
 8005e3e:	e7ef      	b.n	8005e20 <_reclaim_reent+0x90>
 8005e40:	bd70      	pop	{r4, r5, r6, pc}
 8005e42:	bf00      	nop
 8005e44:	20000010 	.word	0x20000010

08005e48 <__malloc_lock>:
 8005e48:	4801      	ldr	r0, [pc, #4]	; (8005e50 <__malloc_lock+0x8>)
 8005e4a:	f7ff bf7b 	b.w	8005d44 <__retarget_lock_acquire_recursive>
 8005e4e:	bf00      	nop
 8005e50:	20001b84 	.word	0x20001b84

08005e54 <__malloc_unlock>:
 8005e54:	4801      	ldr	r0, [pc, #4]	; (8005e5c <__malloc_unlock+0x8>)
 8005e56:	f7ff bf76 	b.w	8005d46 <__retarget_lock_release_recursive>
 8005e5a:	bf00      	nop
 8005e5c:	20001b84 	.word	0x20001b84

08005e60 <_free_r>:
 8005e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e62:	2900      	cmp	r1, #0
 8005e64:	d044      	beq.n	8005ef0 <_free_r+0x90>
 8005e66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e6a:	9001      	str	r0, [sp, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f1a1 0404 	sub.w	r4, r1, #4
 8005e72:	bfb8      	it	lt
 8005e74:	18e4      	addlt	r4, r4, r3
 8005e76:	f7ff ffe7 	bl	8005e48 <__malloc_lock>
 8005e7a:	4a1e      	ldr	r2, [pc, #120]	; (8005ef4 <_free_r+0x94>)
 8005e7c:	9801      	ldr	r0, [sp, #4]
 8005e7e:	6813      	ldr	r3, [r2, #0]
 8005e80:	b933      	cbnz	r3, 8005e90 <_free_r+0x30>
 8005e82:	6063      	str	r3, [r4, #4]
 8005e84:	6014      	str	r4, [r2, #0]
 8005e86:	b003      	add	sp, #12
 8005e88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e8c:	f7ff bfe2 	b.w	8005e54 <__malloc_unlock>
 8005e90:	42a3      	cmp	r3, r4
 8005e92:	d908      	bls.n	8005ea6 <_free_r+0x46>
 8005e94:	6825      	ldr	r5, [r4, #0]
 8005e96:	1961      	adds	r1, r4, r5
 8005e98:	428b      	cmp	r3, r1
 8005e9a:	bf01      	itttt	eq
 8005e9c:	6819      	ldreq	r1, [r3, #0]
 8005e9e:	685b      	ldreq	r3, [r3, #4]
 8005ea0:	1949      	addeq	r1, r1, r5
 8005ea2:	6021      	streq	r1, [r4, #0]
 8005ea4:	e7ed      	b.n	8005e82 <_free_r+0x22>
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	b10b      	cbz	r3, 8005eb0 <_free_r+0x50>
 8005eac:	42a3      	cmp	r3, r4
 8005eae:	d9fa      	bls.n	8005ea6 <_free_r+0x46>
 8005eb0:	6811      	ldr	r1, [r2, #0]
 8005eb2:	1855      	adds	r5, r2, r1
 8005eb4:	42a5      	cmp	r5, r4
 8005eb6:	d10b      	bne.n	8005ed0 <_free_r+0x70>
 8005eb8:	6824      	ldr	r4, [r4, #0]
 8005eba:	4421      	add	r1, r4
 8005ebc:	1854      	adds	r4, r2, r1
 8005ebe:	42a3      	cmp	r3, r4
 8005ec0:	6011      	str	r1, [r2, #0]
 8005ec2:	d1e0      	bne.n	8005e86 <_free_r+0x26>
 8005ec4:	681c      	ldr	r4, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	6053      	str	r3, [r2, #4]
 8005eca:	4421      	add	r1, r4
 8005ecc:	6011      	str	r1, [r2, #0]
 8005ece:	e7da      	b.n	8005e86 <_free_r+0x26>
 8005ed0:	d902      	bls.n	8005ed8 <_free_r+0x78>
 8005ed2:	230c      	movs	r3, #12
 8005ed4:	6003      	str	r3, [r0, #0]
 8005ed6:	e7d6      	b.n	8005e86 <_free_r+0x26>
 8005ed8:	6825      	ldr	r5, [r4, #0]
 8005eda:	1961      	adds	r1, r4, r5
 8005edc:	428b      	cmp	r3, r1
 8005ede:	bf04      	itt	eq
 8005ee0:	6819      	ldreq	r1, [r3, #0]
 8005ee2:	685b      	ldreq	r3, [r3, #4]
 8005ee4:	6063      	str	r3, [r4, #4]
 8005ee6:	bf04      	itt	eq
 8005ee8:	1949      	addeq	r1, r1, r5
 8005eea:	6021      	streq	r1, [r4, #0]
 8005eec:	6054      	str	r4, [r2, #4]
 8005eee:	e7ca      	b.n	8005e86 <_free_r+0x26>
 8005ef0:	b003      	add	sp, #12
 8005ef2:	bd30      	pop	{r4, r5, pc}
 8005ef4:	20001b88 	.word	0x20001b88

08005ef8 <_init>:
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efa:	bf00      	nop
 8005efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005efe:	bc08      	pop	{r3}
 8005f00:	469e      	mov	lr, r3
 8005f02:	4770      	bx	lr

08005f04 <_fini>:
 8005f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f06:	bf00      	nop
 8005f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f0a:	bc08      	pop	{r3}
 8005f0c:	469e      	mov	lr, r3
 8005f0e:	4770      	bx	lr
